use System.Concurrency;
use Collection.Generic;
use Game.SDL2;
use Game.Framework;
use System.IO.File;

class Manager {
	method : virtual : public : Load() ~ Bool;
	method : virtual : public : Unload() ~ Nil;
}

class MapHolder {
	@map : Byte[,];
	@map_start : Byte[];

	New(map : Byte[,], map_start : Byte[]) {
		@map := map;
		@map_start := map_start;
	}

	method : public : Get() ~ Byte[,] {	
		return @map;
	}

	method : public : GetStart() ~ Byte[] {
		return @map_start;
	}
}

#~
Managers map operations
~#
class MapManager from Manager {
	@maps : Vector<MapHolder>;
	@map_index : Int;
	@path : String;
	@player_view : Byte[,];

	New(path : String) {
		Parent();

		@path := "{$path}/debug.map";
		@maps := Vector->New()<MapHolder>;
		@player_view := Byte->New[3, 4];
	}	

	method : public : Load() ~ Bool {
		LoadMaps();
		return true;
	}

	method : public : GetStart() ~ Byte[] {
		return @maps->Get(@map_index)->GetStart();
	}

	method : GetMap() ~ Byte[,] {
		return @maps->Get(@map_index)->Get();
	}

	method : public : GetView(dir : MapManager->Direction,  y : Int, x : Int) ~ Byte[,] {
		if(dir = MapManager->Direction->NORTH) {
"{$x},{$y}"->PrintLine();			
			# first
			@player_view[0,0] := GetType(y, x - 1);
			@player_view[0,1] := GetType(y, x);
			@player_view[0,2] := GetType(y, x + 1);

			# second
foo := GetType(11,5)->As(Int);
"foo: {$foo}"->PrintLine();
			@player_view[1,0] := GetType(y - 1, x - 1);
			@player_view[1,1] := GetType(y - 1, x);
			@player_view[1,2] := GetType(y - 1, x + 1);

			# thrid
			@player_view[2,0] := GetType(y - 2, x - 1);
			@player_view[2,1] := GetType(y - 2, x);
			@player_view[2,2] := GetType(y - 2, x + 1);

			# forth
			@player_view[3,0] := GetType(y - 3, x - 1);
			@player_view[3,1] := GetType(y - 3, x);
			@player_view[3,2] := GetType(y - 3, x + 1);
		};

		return @player_view;
	}

	method : public : GetType(y : Int, x : Int) ~ Byte {
		if(x < 0 | x >= Type->SIZE | y < 0 | y >= Type->SIZE) {
			return Type->NONE;
		};

		map := GetMap();
		return map[y, x];
	}

	method : LoadMaps() ~ Nil {
		map_file := FileReader->New(@path);
		leaving {
			map_file->Close();
		};

		end_line := map_file->ReadString();
		while(<>end_line->StartsWith('-')) {
			rows := cols := Type->SIZE;

			map := Byte->New[rows, cols];
			map_start := Byte->New[2];

			for(i := 0; i < rows; i += 1;) {
				line := map_file->ReadString();
				if(line->Size() <> cols) {
					"--- Invalid map cols! ---"->ErrorLine();
					Runtime->Exit(1);
				};

				each(j : line) {
					select(line->Get(j)) {
						# clear
						label '@' {
"clear: {$i},{$j}"->PrintLine();
							map[i,j] := MapManager->Type->CLEAR;
						}
						# start
						label 'S' {
							map[i,j] := MapManager->Type->START;
							map_start[0] := i; map_start[1] := j;
						}
						# end
						label 'E' {
							map[i,j] := MapManager->Type->END;
						}
						# chest
						label 'C' {
							map[i,j] := MapManager->Type->CHEST;
						}
						# potion
						label 'P' {
							map[i,j] := MapManager->Type->POTION;
						}
						# trap
						label 'T' {
							map[i,j] := MapManager->Type->TRAP;
						}
						# warp
						label 'W' {
							map[i,j] := MapManager->Type->WARP;
						}
						# blocked
						other: {
							map[i,j] := MapManager->Type->BLOCKED;
						}
					};
				};
			};

			@maps->AddBack(MapHolder->New(map, map_start));
			end_line := map_file->ReadString();
		};
	}

	method : public : Unload() ~ Nil {

	}

	consts Type {
		SIZE := 18,
		CLEAR := 0,
		BLOCKED := 1,
		DOOR := 2,
		POTION := 3,
		CHEST := 4,
		TRAP := 5,
		WARP := 6,
		START := 7,
		END := 8,
		NONE := 9
	}

	enum Direction {
		NORTH,
		SOUTH,
		EAST,
		WEST
	}
}

#~
Managers sprite images
~#
class SpriteManager from Manager {
	New(path : String) {
		Parent();
	}

	method : public : Load() ~ Bool {
		return false;
	}

	method : public : Unload() ~ Nil {
		
	}
}

#~
Managers sound assets
~#
class SoundManager from Manager {
	New(path : String) {
		Parent();
	}	

	method : public : Load() ~ Bool {
		return false;
	}

	method : public : Unload() ~ Nil {
		
	}
}