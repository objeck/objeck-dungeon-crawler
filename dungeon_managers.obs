#~
Tiny Dungeon Crawler
Copyright (c) 2020 Randy Hollines
~#

use System.Concurrency;
use Collection.Generic;
use Game.SDL2;
use Game.Framework;
use System.IO.File;

class Manager {
	method : virtual : public : Load() ~ Bool;
	method : virtual : public : Unload() ~ Nil;
}

class MapHolder {
	@map : Byte[,];
	@map_start : Int[];

	New(map : Byte[,], map_start : Int[]) {
		@map := map;
		@map_start := map_start;
	}

	method : public : Get() ~ Byte[,] {	
		return @map;
	}

	method : public : GetStart() ~ Int[] {
		return @map_start;
	}
}

#~
Managers map operations
~#
class MapManager from Manager {
	@maps : Vector<MapHolder>;
	@map_index : Int;
	@path : String;
	@player_view : Int[,];

	New(path : String) {
		Parent();

		@path := "{$path}/debug.map";
		@maps := Vector->New()<MapHolder>;
		@player_view := Int->New[5, 3];
	}	

	method : public : Load() ~ Bool {
		return LoadMaps();
	}

	method : public : GetStart() ~ Int[] {
		return @maps->Get(@map_index)->GetStart();
	}

	method : GetMap() ~ Byte[,] {
		return @maps->Get(@map_index)->Get();
	}

	method : public : GetView(dir : MapManager->Direction, pos : Int[], print : Bool := false) ~ Int[,] {
		y := pos[0]; x := pos[1];

		# north
		if(dir = MapManager->Direction->NORTH) {
			# first
			@player_view[0,0] := GetType(y, x - 1);
			@player_view[0,1] := GetType(y, x);
			@player_view[0,2] := GetType(y, x + 1);

			# second
			@player_view[1,0] := GetType(y - 1, x - 1);
			@player_view[1,1] := GetType(y - 1, x);
			@player_view[1,2] := GetType(y - 1, x + 1);

			# third
			@player_view[2,0] := GetType(y - 2, x - 1);
			@player_view[2,1] := GetType(y - 2, x);
			@player_view[2,2] := GetType(y - 2, x + 1);

			# forth
			@player_view[3,0] := GetType(y - 3, x - 1);
			@player_view[3,1] := GetType(y - 3, x);
			@player_view[3,2] := GetType(y - 3, x + 1);

			# fifth
			@player_view[4,0] := GetType(y - 4, x - 1);
			@player_view[4,1] := GetType(y - 4, x);
			@player_view[4,2] := GetType(y - 4, x + 1);
		}
		# south
		else if(dir = MapManager->Direction->SOUTH) {
			# first
			@player_view[0,0] := GetType(y, x + 1);
			@player_view[0,1] := GetType(y, x);
			@player_view[0,2] := GetType(y, x - 1);

			# second
			@player_view[1,0] := GetType(y + 1, x + 1);
			@player_view[1,1] := GetType(y + 1, x);
			@player_view[1,2] := GetType(y + 1, x - 1);

			# third
			@player_view[2,0] := GetType(y + 2, x + 1);
			@player_view[2,1] := GetType(y + 2, x);
			@player_view[2,2] := GetType(y + 2, x - 1);

			# forth
			@player_view[3,0] := GetType(y + 3, x + 1);
			@player_view[3,1] := GetType(y + 3, x);
			@player_view[3,2] := GetType(y + 3, x - 1);

			# fifth
			@player_view[4,0] := GetType(y + 4, x + 1);
			@player_view[4,1] := GetType(y + 4, x);
			@player_view[4,2] := GetType(y + 4, x - 1);
		}
		# east
		else if(dir = MapManager->Direction->EAST) {
			# first
			@player_view[0,0] := GetType(y - 1, x);
			@player_view[0,1] := GetType(y, x);
			@player_view[0,2] := GetType(y + 1, x);

			# second
			@player_view[1,0] := GetType(y - 1, x + 1);
			@player_view[1,1] := GetType(y, x + 1);
			@player_view[1,2] := GetType(y + 1, x + 1);

			# third
			@player_view[2,0] := GetType(y - 1 , x + 2);
			@player_view[2,1] := GetType(y, x + 2);
			@player_view[2,2] := GetType(y + 1, x + 2);

			# forth
			@player_view[3,0] := GetType(y - 1, x + 3);
			@player_view[3,1] := GetType(y, x + 3);
			@player_view[3,2] := GetType(y + 1, x + 3);

			# fifth
			@player_view[4,0] := GetType(y - 1, x + 4);
			@player_view[4,1] := GetType(y, x + 4);
			@player_view[4,2] := GetType(y + 1, x + 4);
		}
		# west
		else {
			# first
			@player_view[0,0] := GetType(y + 1, x);
			@player_view[0,1] := GetType(y, x);
			@player_view[0,2] := GetType(y - 1, x);

			# second
			@player_view[1,0] := GetType(y + 1, x - 1);
			@player_view[1,1] := GetType(y, x - 1);
			@player_view[1,2] := GetType(y - 1, x - 1);

			# third
			@player_view[2,0] := GetType(y + 1, x - 2);
			@player_view[2,1] := GetType(y, x - 2);
			@player_view[2,2] := GetType(y - 1 , x - 2);

			# forth
			@player_view[3,0] := GetType(y + 1, x - 3);
			@player_view[3,1] := GetType(y, x - 3);
			@player_view[3,2] := GetType(y - 1, x - 3);

			# fifth
			@player_view[4,0] := GetType(y + 1, x - 4);
			@player_view[4,1] := GetType(y, x - 4);
			@player_view[4,2] := GetType(y - 1, x - 4);
		};

		if(print) {
			dims := @player_view->Size();
			for(i := dims[0] - 1; i >= 0; i -= 1;) {
				"{$i}| "->Print();
				for(j := 0; j < dims[1]; j += 1;) {
					@player_view[i,j]->Print();
					if(j + 1 < dims[1]) {
						','->Print();
					};
				};
				'\n'->Print();
			};
			"--------\n"->PrintLine();
		};

		return @player_view;
	}
	
	method : public : GetType(y : Int, x : Int) ~ Int {
		if(x < 0 | x >= Type->MAP_SIZE | y < 0 | y >= Type->MAP_SIZE) {
			return Type->NONE;
		};

		map := GetMap();
		return map[y, x]->As(Int);
	}

	method : LoadMaps() ~ Bool {
		map_file := FileReader->New(@path);
		leaving {
			map_file->Close();
		};

		end_line := map_file->ReadString();
		while(<>end_line->StartsWith('-')) {
			rows := cols := Type->MAP_SIZE;

			map := Byte->New[rows, cols];
			map_start := Int->New[2];

			for(i := 0; i < rows; i += 1;) {
				line := map_file->ReadString();
				if(line->Size() <> cols) {
					return false;
				};

				each(j : line) {
					select(line->Get(j)) {
						# clear
						label '@' {
							map[i,j] := MapManager->Type->OPEN;
						}
						# start
						label 'S' {
							map[i,j] := MapManager->Type->START;
							map_start[0] := i; map_start[1] := j;
						}
						# end
						label 'E' {
							map[i,j] := MapManager->Type->END;
						}
						# chest
						label 'C' {
							map[i,j] := MapManager->Type->CHEST;
						}
						# potion
						label 'P' {
							map[i,j] := MapManager->Type->POTION;
						}
						# trap
						label 'T' {
							map[i,j] := MapManager->Type->TRAP;
						}
						# warp
						label 'W' {
							map[i,j] := MapManager->Type->WARP;
						}
					};
				};
			};

			@maps->AddBack(MapHolder->New(map, map_start));
			end_line := map_file->ReadString();
		};

		return true;
	}

	method : public : Unload() ~ Nil {
	}

	method : public : PrintMap(player_dir : Direction, player_pos : Int[]) ~ Nil {
		map := GetMap();
		map_dimensions := map->Size();

		player_y := player_pos[0];
		player_x := player_pos[1];
		
		for(i := 0; i < map_dimensions[0]; i += 1;) {
			for(j := 0; j < map_dimensions[0]; j += 1;) {
				
				out : Char;
				if(i = player_y & j = player_x) {
					select(player_dir) {
	        			label Direction->NORTH {
	        				out := '↑';
	        			}

	        			label Direction->SOUTH {
	        				out := '↓';
	        			}

	        			label Direction->EAST {
	        				out := '→';
	        			}

	        			label Direction->WEST {
	        				out := '←';
	        			}
	        		};
				}
				else {
					select(map[i,j]) {
						label Type->BLOCKED {
							out := '+';
						}

						label Type->OPEN {
							out := '@';
						}

						label Type->START {
							out := 'S';
						}

						label Type->END {
							out := 'S';
						}

						label Type->DOOR {
							out := 'D';
						}

						label Type->POTION {
							out := 'P';
						}

						label Type->CHEST {
							out := 'C';
						}

						label Type->TRAP {
							out := 'T';
						}

						label Type->WARP {
							out := 'W';
						}
					};
				};
				"{$out} "->Print();
			};
			"\n"->Print();
		};
		"--- Player: y={$player_y}, x={$player_x} ---\n"->PrintLine();
	}

	consts Type {
		MAP_SIZE := 18,
		BLOCKED := 0,
		OPEN := 1,
		START := 2,
		END := 3,
		DOOR := 4,
		POTION := 5,
		CHEST := 6,
		TRAP := 7,
		WARP := 8,
		NONE := 9
	}

	enum Direction {
		NORTH,
		SOUTH,
		EAST,
		WEST
	}

	enum Side {
		LEFT,
		MIDDLE,
		RIGHT
	}

	enum View {
		VIEW_0,
		VIEW_1,
		VIEW_2,
		VIEW_3,
		VIEW_4
	}
}

#~
Managers sprite images
~#
class SpriteManager from Manager {
	@framework : GameFramework;
	@dungeon_sprites : AnimatedImageSprite;

	New(path : String, framework : GameFramework) {
		Parent();
		@framework := framework;
		@dungeon_sprites := @framework->AddAnimatedImageSprite("{$path}/dungeon.png");
	}

	method : public : Load() ~ Bool {
		if(<>@dungeon_sprites->IsOk()) {
			"--- Unable to load: dungeon.png! ---"->ErrorLine();
			return false;
		}
		else {
			for(i := 0; i < Clips->DUNGEON_Y_CLIPS; i += 1;) {
				for(j := 0; j < Clips->DUNGEON_X_CLIPS; j += 1;) {
					@dungeon_sprites->AddClip(Rect->New(j * 800, i * 600, 800, 600));
				};
			};
			@dungeon_sprites->SetTop(35);
			@dungeon_sprites->SetLeft(35);
			@dungeon_sprites->SetScale(0.5);
		};

		return true;
	}

	method : public : GetDungeonSprites() ~ AnimatedImageSprite {
		return @dungeon_sprites;
	}

	method : public : Unload() ~ Nil {
		
	}

	consts Clips {
		DUNGEON_X_CLIPS := 4,
		DUNGEON_Y_CLIPS := 9
	}
}

#~
Managers sound assets
~#
class SoundManager from Manager {
	@dungeon_sprites : AnimatedImageSprite;

	New(path : String, framework : GameFramework) {
		Parent();
		@framework := framework;
	}	

	method : public : Load() ~ Bool {
		return true;
	}

	method : public : Unload() ~ Nil {
		
	}
}