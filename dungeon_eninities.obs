#~
Tiny Dungeon Crawler
Copyright (c) 2020 Randy Hollines
~#

use System.Concurrency;
use Collection.Generic;
use Game.SDL2;
use Game.Framework;
use System.IO.File;

# --- Magic ---
class LightHeal from Magic {
	New() {
		Parent(Int->Random(4, 6), 0, 0, 0);
	}

	method : public : ToString() ~ String {
		return "Light Heal";
	}
}

class SmallMissle from Magic {
	New() {
		Parent(0, 0, 0, Int->Random(4, 6));
	}

	method : public : ToString() ~ String {
		return "Small Missle";
	}
}

class Magic {
	New(hp : Int, mp : Int, enc : Int, dam : Int) {
		
	}

	method : virtual : public : ToString() ~ String;
}

# --- Potions ---
class Potion {
	@type : Potion->Type;
	@count : Int;
	@hp : Int;
	@mp : Int;
	@enc : Int;
	
	enum Type {
		WEAK_HEALTH,
		WEAK_MAGIC,
		WEAK_INVISIBILITY
	}

	New(type : Potion->Type) {
		@type := type;
		select(type) {
			label Type->WEAK_HEALTH {
				@hp := Int->Random(5, 7);
				@mp := @enc := 0;
			}

			label Type->WEAK_MAGIC {
				@mp := Int->Random(6, 9);
				@hp := @enc := 0;

			}

			label Type->WEAK_INVISIBILITY {
				@hp := @mp := 0;
				@enc := Int->Random(10, 12);
			}
		};
	}

	method : public : GetHp() ~ Int {
		return @hp;
	}

	method : public : GetMp() ~ Int {
		return @mp;
	}

	method : public : GetEnc() ~ Int {
		return @enc;
	}

	method : public : Add(count : Int) ~ Nil {
		@count += count;
	}

	method : public : GetType() ~ Potion->Type {
		return @type;
	}

	method : public : GetCount() ~ Int {
		return @count;
	}

	method : public : ToString() ~ String {
		select(@type) {
			label Type->WEAK_HEALTH {
				return "Weak Health";
			}

			label Type->WEAK_MAGIC {
				return "Weak Magic";
			}

			label Type->WEAK_INVISIBILITY {
				return "Weak Invisibility";
			}
		};

		return "Unknown";
	}
}

# --- Weapons ---
interface Weapon {
	method : virtual : public : GetHit() ~ Float;
	method : virtual : public : ToString() ~ String;	
}

class WoodenSword implements Weapon {
	New() {
	}

	method : public : GetHit() ~ Float {
		return 0.2;
	}

	method : public : ToString() ~ String {
		return "Wooden Sword";
	}
}

# --- Armor ---
interface Armor {
	method : virtual : public : GetHit() ~ Float;
	method : virtual : public : ToString() ~ String;
}

class LeatherTunic implements Armor {
	New() {
	}

	method : public : GetHit() ~ Float {
		return 0.15;
	}

	method : public : ToString() ~ String {
		return "Leather Tunic";
	}
}

# --- Player ---

class Player from Entity {
	@name : String;
	@experience : Int;
	@mp : Int;
	@gold : Int;
	@tents : Int;

	@weapon : Weapon;
	@armor : Armor;

	@potions : Potion[];
	@magics : Magic[];

	New(name : String) {
		Parent(EntityType->PERSON,	# type
			1, 						# level
			Int->Random(21, 28),	# max hp
			Int->Random(14, 17),	# strength
			Int->Random(12, 14),	# agility
			Int->Random(13, 15));	# stamina

		@name := name;
		@mp := Int->Random(4, 7);
		@potions := Potion->New[3];
		@magics := Magic->New[2];
	}

	#
	# --- Potions ---
	#
	method : public : AddPotion(type : Potion->Type, count : Int) ~ Bool {
		found := false;

		for(i := 0; <>found & i < @potions->Size(); i += 1;) {
			potion := @potions[i];
			if(potion <> Nil & potion->GetType() = type) {
				potion->Add(count);
				found := true;
"--- ADDED POTION ---"->PrintLine();				
			};
		};

		if(<>found) {
			for(i := 0; <>found & i < @potions->Size(); i += 1;) {
				potion := @potions[i];
				if(potion = Nil) {
					@potions[i] := Potion->New(type);
					@potions[i]->Add(count);
					found := true;
				};
			};
		};

		return found;
	}

	method : public : UsePotion(index : Int) ~ Nil {
	}

	method : public : GetPotion1() ~ Potion {
		return @potions[0];
	}

	method : public : GetPotion2() ~ Potion {
		return @potions[1];
	}

	method : public : GetPotion3() ~ Potion {
		return @potions[2];
	}

	#
	# --- Magic ---
	#
	method : public : UseMagic(index : Int) ~ Nil {
	}

	method : public : GetMagic1() ~ Magic {
		return @magics[0];
	}

	method : public : SetMagic1(magic1 : Magic) ~ Nil {
		@magics[0] := magic1;
	}

	method : public : GetMagic2() ~ Magic {
		return @magics[1];
	}

	method : public : SetMagic2(magic2 : Magic) ~ Nil {
		@magics[1] := magic2;
	}

	#
	# --- Tents ---
	#
	method : public : AddTent() ~ Nil {
		@tents += 1;
	}

	method : public : GetTents() ~ Int {
		return @tents;
	}

	#
	# --- Loot ---
	#
	
	#
	# --- Weapons and Armor ---
	#
	method : public : SetWeapon(weapon : Weapon) ~ Nil {
		@weapon := weapon;
	}

	method : public : SetArmor(armor : Armor) ~ Nil {
		@armor := armor;
	}

	method : public : GetWeapon() ~ Weapon {
		return @weapon;
	}

	method : public : GetArmor() ~ Armor {
		return @armor;
	}

	#
	# --- Gold and Exp ---
	#
	method : public : AddExperince(monster : Entity) ~ Nil {
		@experience += monster->GetFightExperince();
	}

	method : public : GetExperince() ~ Int {
		return @experience;
	}

	method : public : AddGold(value : Int) ~ Nil {
		@gold += value;
	}

	method : public : GetGold() ~ Int {
		return @gold;
	}

	#
	# --- Attributes ---
	#
	method : public : GetAc() ~ Int {
		return -1 * (@strength * 0.45 + @agility * 0.25 + @armor_block * 0.4);
	}

	method : public : GetMp() ~ Int {
		return @mp;
	}

	method : public : GetLevel() ~ Int {
		if(@experience > 300 & @level < 5) {
			SetMaxHp(GetMaxHp() * 1.10);
			SetHp(@max_hp, true);
			@level := 5;
		}
		else if(@experience <= 300 & @experience > 200 & @level < 4) {
			SetMaxHp(GetMaxHp() * 1.15);
			SetHp(@max_hp, true);
			@level := 4;
		}
		else if(@experience <= 200 & @experience > 130 & @level < 3) {
			SetMaxHp(GetMaxHp() * 1.20);
			SetHp(@max_hp, true);
			@level := 3;
		}
		else if(@experience <= 130 & @experience > 50 & @level < 2) {
			SetMaxHp(GetMaxHp() * 1.25);
			SetHp(@max_hp, true);
			@level := 2;
		}
		else if(@level = 1) {
			@level := 1;
		};

		return @level;
		
	}

	method : public : GetName() ~ String {
		return @name;
	}

	method : public : GetFightExperince() ~ Int {
		return @experience;
	}

	method : public : GetImageEnd() ~ Int {
		return -1;
	}

	method : public : GetImageStart() ~ Int {
		return -1;
	}

	method : public : GetHealth() ~ String {
		return "Healthy";
	}
	
	method : public : ToString() ~ String {
		ac := GetAc();
		return "{$@name}: HP={$@hp}, MP={$@mp}, AC={$ac}";
	}
}

class Entity {
	@type : EntityType;
	@level : Int;
	@max_hp : Int;
	@hp : Int;
	
	@strength : Float;
	@agility : Float;
	@stamina : Float;
	@weapon_hit : Float;
	@armor_block : Float;
	@levels : Float[];
	@image_index : Int;
	@debug : Bool;

	enum EntityType {
		PERSON,
		SLIME,
		RAT,
		GHOST
	}
	
	New(type : EntityType, level : Int, max_hp : Int, strength : Int, agility : Int, stamina : Int) {
		@type := type;
		@level := level;
		@max_hp := @hp := max_hp;
		@max_hp := max_hp;
		@strength := strength;
		@agility := agility;
		@stamina := stamina;
		@debug := true;

		base := 0.75;
		@levels := Float->New[30];
		each(i : @levels) {
			@levels[i] := base;
			base += 0.05;
		};
	}

	method : virtual : public : GetName() ~ String;

	method : virtual : public : GetFightExperince() ~ Int;

	method : virtual : public : GetImageEnd() ~ Int;

	method : virtual : public : GetImageStart() ~ Int;

	method : public : GetHpPercentage() ~ Float {
		return @hp->As(Float) / @max_hp->As(Float);
	}

	method : public : IsAlive() ~ Bool {
		return @hp > 0;
	}

	method : public : GetHp() ~ Int {
		return @hp;
	}

	method : public : GetMaxHp() ~ Int {
		return @max_hp;
	}

	method : public : SetMaxHp(max_hp : Int) ~ Nil {
		@max_hp := max_hp;
	}

	method : public : GetAttack() ~ Int {
		return (@strength * 0.45 + @agility * 0.25 + @weapon_hit * 0.4) * @levels[Int->Random(@level - 1, @level + 1)];
	}

	method : public : GetDefense() ~ Int {
		return (@stamina * 0.35 + @agility * 0.25 + @armor_block * 0.4) * @levels[Int->Random(@level - 1, @level + 1)];
	}

	method : public : Attack(opponent : Entity) ~ Bool {
		attack := GetAttack();
		defense := opponent->GetDefense();
		
		diff := attack - defense;
		opponent->SetHp(diff < 0 ? Int->Random(0, 1) : diff);

		if(@debug) {
			our_name := GetName();
			opponent_name := opponent->GetName();
			"{$our_name} => {$opponent_name}: attack={$attack}, defense={$defense} -> {$diff}\n---"->PrintLine();
		};

		return diff > 0;
	}

	method : public : SetHp(adjustment : Int, is_potion : Bool := false) ~ Bool {
		if(<>is_potion) {
			if(adjustment <= 0) {
				return false;
			};
			@hp -= adjustment;
		}
		else {
			@hp += adjustment;
		};

		if(@hp < 1) {
			@hp := 0;
			return true;
		};

		if(@hp > @max_hp) {
			@hp := @max_hp;
		};

		return false;
	}
}

# --- Monsters ---

#~
Ghost
~#
class Ghost from Entity {
	New(level : Int) {
		Parent(EntityType->GHOST,		# type
			level,						# level
			Int->Random(9, 13),			# max hp
			Int->Random(17, 19),		# strength
			Int->Random(11, 13),		# agility
			Int->Random(7, 10));		# stamina
	}

	method : public : GetName() ~ String {
		return "Ghost";
	}

	method : public : GetFightExperince() ~ Int {
		return Int->Random(9, 11);
	}

	method : public : GetImageStart() ~ Int {
		return 8;
	}

	method : public : GetImageEnd() ~ Int {
		return 11;
	}
}

#~
Slime
~#
class Slime from Entity {
	New(level : Int) {
		Parent(EntityType->SLIME,	# type
			level,					# level
			Int->Random(7, 11),		# max hp
			Int->Random(14, 16),	# strength
			Int->Random(10, 11),	# agility
			Int->Random(14, 15));	# stamina
	}

	method : public : GetName() ~ String {
		return "Slime";
	}

	method : public : GetFightExperince() ~ Int {
		return Int->Random(9, 11);
	}

	method : public : GetImageStart() ~ Int {
		return 4;
	}

	method : public : GetImageEnd() ~ Int {
		return 7;
	}
}

#~
Rat
~#
class Rat from Entity {
	New(level : Int) {
		Parent(EntityType->RAT,		# type
			level,					# level
			Int->Random(5, 10),		# max hp
			Int->Random(15, 17),	# strength
			Int->Random(14, 15),	# agility
			Int->Random(8, 10));		# stamina
	}

	method : public : GetName() ~ String {
		return "Rat";
	}

	method : public : GetFightExperince() ~ Int {
		return Int->Random(12, 15);
	}

	method : public : GetImageStart() ~ Int {
		return 0;
	}

	method : public : GetImageEnd() ~ Int {
		return 3;
	}
}