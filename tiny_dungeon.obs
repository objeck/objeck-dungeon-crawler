#~
Tiny Dungeon Crawler
Copyright (c) 2020, 2022 Randy Hollines
~#

use Collection.Generic;
use Game.SDL2;
use Game.Framework;

class TinyDungeon {
	@framework : GameFramework;
	@sprite_manager : SpriteManager;
	@sound_manager : SoundManager;
	@map_manager : MapManager;
	@quit : Bool;
	@debug : Bool;

	@player_location : Int[];
	@player_nav_map : Int[,];
	@player_direction : MapManager->Direction;

	@dungeon_views : Int[];
	@view_type : MapManager->Type;
	@view_forward_type : MapManager->Type;

	@can_preview_item : Bool;
	@can_show_item : Bool;

	@monster_sprint_index : Int;

	@monster : Monster;
	@monster_hit : Int;

	@player : Player;
	@player_hit : Int;
	
	@encounter_perc : Int;

	@stat_box : Rectangle;
	@stat_box_texts : TextSprite[];

	@item_box : Rectangle;
	@item_box_texts : TextSprite[];

	@text_color : Color;

	New() {
		@framework := GameFramework->New(Game->SCREEN_WIDTH, Game->SCREEN_HEIGHT, "Tiny Dungeon");
		@framework->SetClearColor(Color->New(50, 60, 57));
		
		@player := Player->New("Blueberry");
		@player->SetWeapon(WoodenSword->New());
		@player->SetArmor(LeatherTunic->New());
		@player->SetMagic1(LightHeal->New());
		@player->AddTent();
		@encounter_perc := 15;

		@text_color := Color->New(248, 240, 227);
		MakeManagers();
		MakeTexts();

		@player_location := Int->New[3];
		@dungeon_views := Int->New[SpriteManager->Clips->DUNGEON_X_CLIPS + 2];

		@monster_sprint_index := 0;

		@debug := true;
	}

	function : Main(args : String[]) ~ Nil {
		TinyDungeon->New()->Run();
	}

	method : Run() ~ Nil {
		if(<>@map_manager->Load()) {
			"--- Unable to load maps! ---"->ErrorLine();
			return;
		};

		if(<>@sprite_manager->Load()) {
			"--- Unable to load sprites! ---"->ErrorLine();
			return;
		};

		#
		# TODO: add sound manager
		#

		leaving {
			@map_manager->Unload();
			@sprite_manager->Unload();
			@sound_manager->Unload();
		};

		if(@framework->IsOk()) {
			StartLevel();

			frame_count := 0;
			@quit := false;

			e := @framework->GetEvent();
			while(<>@quit) {
				@framework->FrameStart();
				
				# process input
				while(e->Poll() <> 0) {
					# @quit
					if(e->GetType() = EventType->SDL_QUIT) {
						@quit := true;
					}
					# keyboard
					else if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
				        GetInput(e);
				    };
				};

				Render(frame_count);

				@framework->FrameEnd();

				frame_count += 1;
				if(frame_count >= @framework->GetFps()) {
					frame_count := 0;
				};
			};
		}
		else {
			"--- Error Initializing Environment ---"->ErrorLine();
			return;
		};
	}

	method : MakeManagers() ~ Nil {
		@sprite_manager := SpriteManager->New("./images", @framework);
		@sound_manager := SoundManager->New("./sounds", @framework);
		@map_manager := MapManager->New("./maps");
	}

	method : MakeTexts() ~ Nil {
		# make stat box
		@stat_box := @framework->AddRectangle(400, 165);
		@stat_box->SetFill(true);
		@stat_box->SetColor(Color->New(78,53,36));

		@stat_box_texts := TextSprite->New[6];
		each(i : @stat_box_texts) {
			@stat_box_texts[i] := @framework->AddTextSprite();
		};
		RefreshStats();

		# make item box
		@item_box := @framework->AddRectangle(305, 165);
		@item_box->SetFill(true);
		@item_box->SetColor(Color->New(78,53,36));

		@item_box_texts := TextSprite->New[5];
		each(i : @item_box_texts) {
			@item_box_texts[i] := @framework->AddTextSprite();
		};
		RefreshItems();
	}

	method : RefreshStats() ~ Nil {
		# health and armor
		player_health := @player->GetHealth();
		player_weapon := @player->GetWeapon();
		player_armor := @player->GetArmor();
		
		# spells
		player_spell1 := @player->GetMagic1() = Nil ? "None" : @player->GetMagic1()->ToString();
		player_spell2 := @player->GetMagic2() = Nil ? "None" : @player->GetMagic2()->ToString();
		
		stat_box_copy := [
			"{$@player}", 
			"{$player_weapon}, {$player_armor}",
			"Spells",
			"  1: {$player_spell1}",
			"  2: {$player_spell2}",
			"Condition: {$player_health}"];

		if(stat_box_copy->Size() <> @stat_box_texts->Size()) {
			"--- Stat box copy mismatch ---"->ErrorLine();
			Runtime->Exit(1);
		};

		each(i :@stat_box_texts) {
			@stat_box_texts[i]->RenderedText(stat_box_copy[i], @text_color);
		};
	}

	method : RefreshItems() ~ Nil {
		# potions
		potion1_text : String;
		player_potion1 := @player->GetPotion1();
		if(player_potion1 <> Nil) {
			 potion_desc := @player->GetPotion1()->ToString();
			 potion_count := @player->GetPotion1()->GetCount();
			 potion1_text := "{$potion_desc} x {$potion_count}";
		}
		else {
			potion1_text := "None";
		};

		potion2_text : String;
		player_potion2 := @player->GetPotion2();
		if(player_potion2 <> Nil) {
			 potion_desc := @player->GetPotion2()->ToString();
			 potion_count := @player->GetPotion2()->GetCount();
			 potion2_text := "{$potion_desc} x {$potion_count}";
		}
		else {
			potion2_text := "None";
		};

		potion3_text : String;
		player_potion3 := @player->GetPotion3();
		if(player_potion3 <> Nil) {
			 potion_desc := @player->GetPotion3()->ToString();
			 potion_count := @player->GetPotion3()->GetCount();
			 potion3_text := "{$potion_desc} x {$potion_count}";
		}
		else {
			potion3_text := "None";
		};
		
		# gold and tents
		player_gold_text := @player->GetGold();
		player_tent_text := @player->GetTents();

		item_box_copy := [
			"Gold={$player_gold_text}, Tent x {$player_tent_text}",
			"Potions",
			"  A: {$potion1_text}",
			"  B: {$potion2_text}",
			"  C: {$potion3_text}"];

		if(item_box_copy->Size() <> @item_box_texts->Size()) {
			"--- Item box copy mismatch ---"->ErrorLine();
			Runtime->Exit(1);
		};

		each(i : @item_box_texts) {
			@item_box_texts[i]->RenderedText(item_box_copy[i], @text_color);
		};
	}

	method : StartLevel() ~ Nil {
		@player_direction := MapManager->Direction->NORTH;
		start_location := @map_manager->GetStart();
		@player_location[0] := start_location[0];
		@player_location[1] := start_location[1];

		@player_nav_map := Int->New[MapManager->Type->MAP_SIZE, MapManager->Type->MAP_SIZE];
		@player_nav_map[@player_location[0], @player_location[1]] := 1;

		UpdateView();
	}

	method : GetInput(e : Event) ~ Nil {	
		select(e->GetKey()->GetKeysym()->GetScancode()) {
        	label Scancode->SDL_SCANCODE_UP
        	label Scancode->SDL_SCANCODE_W {
        		if(@monster = Nil) {
	        		MoveForward();
	        		UpdateView();
   		       		CheckBattle();
	        	};
        	}

        	label Scancode->SDL_SCANCODE_LEFT
        	label Scancode->SDL_SCANCODE_A {
        		if(@monster = Nil) {
	        		MoveLeft();
	        		UpdateView();
	        	};
        	}

        	label Scancode->SDL_SCANCODE_RIGHT
        	label Scancode->SDL_SCANCODE_D {
        		if(@monster = Nil) {
	        		MoveRight();
	        		UpdateView();
	        	};
        	}

        	label Scancode->SDL_SCANCODE_SPACE {
        		if(@monster <> Nil) {
        			@player_hit := @monster->Attack(@player) ? 15 : 0;
        			if(<>@player->IsAlive()) {
						"--- He's dead Jim ---"->PrintLine();
        				@quit := true;
        			}
        			else {
	        			@monster_hit := @player->Attack(@monster) ? 15 : 0;
	        			if(<>@monster->IsAlive()) {
	        				@monster := Nil;
	        				@player_hit := @monster_hit := 0;
	        			};
	        		};

	        		RefreshStats();
	        	}
	        	else if(OnItem()) {
	        		if(@view_type = MapManager->Type->POTION) {
       					AddPotion(Potion->Type->WEAK_HEALTH);
	        		}
	        		else if(@view_type = MapManager->Type->LOOT) {
	        			AddGold(10);
	        		};
	        	};
        	}

        	# Potion 1
        	label Scancode->SDL_SCANCODE_F5 {
        		if(@player->UsePotion(0)) {
        			RefreshStats();
        			RefreshItems();
        		};
        	}

        	# Potion 2
        	label Scancode->SDL_SCANCODE_F6 {
        	}

        	# Potion 3
        	label Scancode->SDL_SCANCODE_F7 {
        	}
        };

	}

	method : MoveForward() ~ Nil {
		player_view := @map_manager->GetView(@player_direction, @player_location);
		view_type := player_view[MapManager->View->VIEW_1, MapManager->Side->MIDDLE];
		if(IsOpen(view_type)) {
			@view_type := view_type->As(MapManager->Type);

			select(@player_direction) {
				label MapManager->Direction->NORTH {
					@player_location[0] -= 1;
				}

				label MapManager->Direction->SOUTH {
					@player_location[0] += 1;

				}

				label MapManager->Direction->EAST {
					@player_location[1] += 1;
				}

				label MapManager->Direction->WEST {
					@player_location[1] -= 1;
				}
			};

			if(@player_nav_map[@player_location[0], @player_location[1]] = 0) {
				@player_nav_map[@player_location[0], @player_location[1]] := 1;
			};
		};
	}

	method : DistantView() ~ Nil {
		select(@player_direction) {
			label MapManager->Direction->NORTH {
				@view_forward_type := @map_manager->GetType(@player_location[0] - 1, @player_location[1]);
			}

			label MapManager->Direction->SOUTH {
				@view_forward_type := @map_manager->GetType(@player_location[0] + 1, @player_location[1]);

			}

			label MapManager->Direction->EAST {
				@view_forward_type := @map_manager->GetType(@player_location[0], @player_location[1] + 1);
			}

			label MapManager->Direction->WEST {
				@view_forward_type := @map_manager->GetType(@player_location[0], @player_location[1] - 1);
			}
		};
	}

	method : CheckBattle() ~ Nil {
		if(<>OnItem() & @monster = Nil & Int->Random(99) < @encounter_perc) {
			select(Int->Random(2)) {
				label 0 {
					@monster := Rat->New(1);
				}

				label 1 {
					@monster := Ghost->New(1);
				}

				other {
					@monster := Slime->New(1);
				}
			};

			@monster_sprint_index := @monster->GetImageStart();
		};
	}

	method : AddPotion(type : Potion->Type) ~ Nil {
		if(@player->AddPotion(type, 1) & @map_manager->SetType(@player_location, MapManager->Type->OPEN)) {
			RefreshItems();
			@can_show_item := false;
		};
	}

	method : AddGold(amount : Int) ~ Nil {
		if(@map_manager->SetType(@player_location, MapManager->Type->OPEN)) {
			@player->AddGold(amount);			
			RefreshItems();
			@can_show_item := false;
		};
	}

	method : native : UpdateView() ~ Nil {
        DistantView();

		# @map_manager->ShowDebugMap(@player_direction, @player_location);

		@map_manager->GetView(@player_direction, @player_location);
		each(i : @dungeon_views) {
			@dungeon_views[i] := -1;
		};

		hash_view := @map_manager->HashView();
		v0 := hash_view[0];
		v1 := hash_view[1];
		v2 := hash_view[2];
		v3 := hash_view[3];
		v4 := hash_view[4];

		blocked := false;

		#
		# V0
		#
		select(v0) {
			# enclosed
			label 2 {
				@dungeon_views[1] := 3;
			}

			# right
			label 3 {
				@dungeon_views[1] := 7;
			}

			# left
			label 6 {
				@dungeon_views[1] := 11;
			}

			# left & right
			label 7 {
				@dungeon_views[1] := 15;
			}
		};

		#
		# V1
		#
		if(v1 <> 0 & v1 <> 1 & v1 <> 4) {	
			select(v1) {
				# enclosed
				label 2 {
					@dungeon_views[2] := 2;
				}

				# right
				label 3 {
					if(v0 = 3) {
						@dungeon_views[1] := 31;
						@dungeon_views[2] := 30;
					}
					else if(v0 = 7) {
						@dungeon_views[1] := 95;
						@dungeon_views[2] := 30;
					}
					else {
						@dungeon_views[2] := 6;
					};
				}

				# left
				label 6 {
					if(v0 = 6) {
						@dungeon_views[1] := 27;
						@dungeon_views[2] := 26;
					}
					else if(v0 = 7) {
						@dungeon_views[1] := 92;
						@dungeon_views[2] := 26;
					}
					else {
						@dungeon_views[2] := 10;
					};
				}

				# left & right
				label 7 {
					if(v0 = 2) {
						@dungeon_views[2] := 34;
						blocked := true;
					}
					else if(v0 = 3) {
						@dungeon_views[1] := 31;
						@dungeon_views[2] := 117; # 70
					}
					else if(v0 = 6) {
						@dungeon_views[1] := 27;
						@dungeon_views[2] := 119; # 82
					}
					else if(v0 = 7) {
						@dungeon_views[1] := 23;
						@dungeon_views[2] := 22;
					}
					else {
						@dungeon_views[2] := 14;
					};
				}
			};
			
			#
			# V2
			#
			if(v2 <> 0 & v2 <> 1 & v2 <> 4) {
				select(v2) {
					# enclosed
					label 2 {
						if(v1 = 3) {
							if(v0 = 2) {
								@dungeon_views[2] := 114;
							}
							else {
								@dungeon_views[2] := 115;
							};
							@dungeon_views[3] := 1;
						}
						else if(v1 = 6) {
							if(v0 = 2) {
								@dungeon_views[2] := 110;
							}
							else {
								@dungeon_views[2] := 111;
							};
							@dungeon_views[3] := 1;
						}
						else if(v1 = 7) {
							@dungeon_views[3] := 1;
						}
						else {
							@dungeon_views[3] := 1;
						};
					}

					# right
					label 3 {
						if(v1 = 2) {
							@dungeon_views[3] := 61;
						}
						else if(v1 = 3) {
							if(v0 = 2 | v0 = 6) {
								@dungeon_views[3] := 57;
							}
							else {
								@dungeon_views[3] := 29;
							};
						}
						# open
						else if(v1 = 7) {
							@dungeon_views[3] := 29;
						}
						else {
							@dungeon_views[3] := 5;
						};
					}

					# left
					label 6 {
						if(v1 = 2) {
							@dungeon_views[3] := 49;
						}
						else if(v1 = 6) {
							if(v0 = 2 | v0 = 3) {
								@dungeon_views[3] := 45;
							}
							else {
								@dungeon_views[3] := 25;
							};
						}
						# open
						else if(v1 = 7) {
							@dungeon_views[3] := 25;
						}
						else {							
							@dungeon_views[3] := 9;
						};
					}

					# left & right
					label 7 {
						if(v1 = 2) {
							@dungeon_views[3] := 37;
						}
						else if(v1 = 3) {
							@dungeon_views[3] := 93;
						}
						else if(v1 = 6) {
							@dungeon_views[3] := 94;
						}
						else if(v1 = 7) {
							# door way
							if(v0 = 2) {
								@dungeon_views[3] := 33;
							}
							else {
								@dungeon_views[3] := 21;
							};
						}
						else {
							@dungeon_views[3] := 13;
						};
					}
				};

				#
				# V3
				#
				if(v3 <> 0 & v3 <> 1 & v3 <> 4) {
					select(v3) {
						# enclosed
						label 2 {
							if(v2 = 3) {
								if(v1 = 2) {
									@dungeon_views[3] := 112;
									@dungeon_views[4] := 0;
								}
								else {
									@dungeon_views[3] := 113;
									@dungeon_views[4] := 0;
								};
							}
							else if(v2 = 6) {
								if(v1 = 2) {
									@dungeon_views[3] := 108;
									@dungeon_views[4] := 0;
								}
								else {
									@dungeon_views[3] := 109;
									@dungeon_views[4] := 0;
								};
							}
							else if(v2 = 7) {
								if(v1 = 2) {
									@dungeon_views[3] := 13;
								}
								else {
									@dungeon_views[3] := 106;
								};
								@dungeon_views[4] := 0;
							}
							else {
								@dungeon_views[4] := 0;
							};
						}

						# right
						label 3 {
							if(v2 = 2) {
								@dungeon_views[4] := 64;
							}
							else if(v2 = 3) {
								if(v0 = 2 & v1 = 2) {
									@dungeon_views[4] := 60;	
								}
								else if(v0 = 2) {
									@dungeon_views[4] := 56;
								}
								else if(v1 = 2) {
									@dungeon_views[4] := 60;
								}
								else {
									@dungeon_views[4] := 28;
								};
							}
							else if(v2 = 7) {
								@dungeon_views[4] := 28;
							}
							else {
								@dungeon_views[4] := 4;
							};
						}

						# left
						label 6 {
							if(v2 = 2) {
								@dungeon_views[4] := 52;
							}
							else if(v2 = 6) {
								if(v0 = 2 & v1 = 2) {
									@dungeon_views[4] := 48;	
								}
								else if(v0 = 2) {
									@dungeon_views[4] := 44;	
								}
								else if(v1 = 2) {
									@dungeon_views[4] := 48;
								}
								else {
									@dungeon_views[4] := 24;
								};
							}
							else if(v2 = 7) {
								@dungeon_views[4] := 24;
							}
							else {
								@dungeon_views[4] := 8;
							};
						}

						# left & right
						label 7 {
							if(v2 = 2) {
								@dungeon_views[4] := 40;
							}
							else if(v2 = 3) {
								if(v0 = 2) {
									@dungeon_views[4] := 76;
								}
								else {
									@dungeon_views[4] := 99;
								};
							}
							else if(v2 = 6) {
								if(v0 = 2) {
									@dungeon_views[4] := 88;
								}
								else {
									@dungeon_views[4] := 103;
								};
							}
							else if(v2 = 7) {
								# door way
								if(v0 = 2 & v1 = 2) {
									@dungeon_views[4] := 36;
								}
								else if(v0 = 2) {
									@dungeon_views[4] := 32;
								}
								else {
									@dungeon_views[4] := 20;
								};
							}
							else {
								@dungeon_views[4] := 12;
							};
						}
					};
				}
				else {
					@dungeon_views[0] := 17;
					blocked := true;
				};
			}
			else {
				@dungeon_views[0] := 18;
				blocked := true;
			};
		}
		else {
			@dungeon_views[0] := 19;
			blocked := true;
		};

		#
		# Background
		#
		if(<>blocked) {
			select(v4) {
				# enclosed
				label 2, 3, 6, 7 {
					@dungeon_views[0] := 116;
				}

				other {
					@dungeon_views[0] := 18;
				}
			};
		};
				
		@can_show_item := OnItem() & v0 = 2 & v1 = 0 & v2 = 0;
		@can_preview_item := v1=2 & v2=0 & v4 = 0;

		if(@debug) {
			p0 := @dungeon_views[1]; p1 := @dungeon_views[2];
			p2 := @dungeon_views[3]; p3 := @dungeon_views[4];
			p4 := @dungeon_views[0]; 
			msg := "Hash Values:\n\tv0\tv1\tv2\tv3\tv4\n\t-----------------------------------\n";
			msg += "View\t{$v0}\t{$v1}\t{$v2}\t{$v3}\t{$v4}\n";
			msg += "Image\t{$p0}\t{$p1}\t{$p2}\t{$p3}\t{$p4}\n";
			view_forward_type := @view_forward_type->As(Int);
			msg += "view_forward_type={$view_forward_type},can_preview_item={$@can_preview_item},can_show_item={$@can_show_item}\n===";
			msg->PrintLine();
		};
	}

	method : OnItem() ~ Bool {
		return @view_type = MapManager->Type->POTION | @view_type = MapManager->Type->LOOT | 
			@view_type = MapManager->Type->LATTER_UP | @view_type = MapManager->Type->LATTER_DOWN;
	}

	method : IsLadderForward() ~ Bool {
		return @view_forward_type = MapManager->Type->LATTER_UP | @view_type = MapManager->Type->LATTER_DOWN;
	}

	method : IsOpen(player_view : Int) ~ Bool {
		if(player_view >= MapManager->Type->OPEN & player_view <= MapManager->Type->END) {
			return true;
		};

		return false;
	}

	method : MoveLeft() ~ Nil {
		select(@player_direction) {
			label MapManager->Direction->NORTH {
				@player_direction := MapManager->Direction->WEST;
			}

			label MapManager->Direction->SOUTH {
				@player_direction := MapManager->Direction->EAST;
			}

			label MapManager->Direction->EAST {
				@player_direction := MapManager->Direction->NORTH;
			}

			label MapManager->Direction->WEST {
				@player_direction := MapManager->Direction->SOUTH;
			}
		};
	}

	method : MoveRight() ~ Nil {
		select(@player_direction) {
			label MapManager->Direction->NORTH {
				@player_direction := MapManager->Direction->EAST;
			}

			label MapManager->Direction->SOUTH {
				@player_direction := MapManager->Direction->WEST;
			}

			label MapManager->Direction->EAST {
				@player_direction := MapManager->Direction->SOUTH;
			}

			label MapManager->Direction->WEST {
				@player_direction := MapManager->Direction->NORTH;
			}
		};
	}

	method : Render(frame_count : Int) ~ Nil {
		@framework->Clear();

		RenderDungeon(frame_count);

		if(@monster <> Nil) {
			RenderMonster(frame_count);

			if(@player_hit > 0) {
				@sprite_manager->RenderMonsterHit();
				@player_hit -= 1;
			}
			else if(@monster_hit > 0) {
				@sprite_manager->RenderPlayerHit();
				@monster_hit -= 1;
			};
		};
		RenderMap(frame_count);

		@stat_box->Render(15, 330);
		each(i : @stat_box_texts) {
			@stat_box_texts[i]->Render(25, 340 + i * 25);
		};

		@item_box->Render(445, 330);
		each(i : @item_box_texts) {
			@item_box_texts[i]->Render(460, 340 + i * 30);
		};

		@framework->Show();
	}

	method : RenderMonster(frame_count : Int) ~ Nil {		
		@sprite_manager->RenderMonsterSprite(@monster_sprint_index, 95, 120);

		# update
		if(frame_count % 20 = 0) {
			@monster_sprint_index += 1;
			if(@monster_sprint_index >= @monster->GetImageEnd()) {
				@monster_sprint_index := @monster->GetImageStart();
			};
		};

		x_offset := 260;
		graph_perc := 0;
		monster_perc := (@monster->GetHpPerc() * 100.0)->ToInt();
		each(i : 5) {
			if(graph_perc < monster_perc) {
				@sprite_manager->RenderMapSprite(6, 300, x_offset);
			}
			else {
				@sprite_manager->RenderMapSprite(7, 300, x_offset);
			};
			# update
			x_offset -= 16;
			graph_perc += 20;
		};
	}

	method : RenderDungeon(frame_count : Int) ~ Nil {
		each(i : @dungeon_views) {
			@sprite_manager->RenderDungeonSprite(@dungeon_views[i]);
		};

		if(@view_type = MapManager->Type->POTION & @can_show_item) {
			@sprite_manager->RenderPotion();
		};

		if(@view_type = MapManager->Type->LOOT & @can_show_item) {
			@sprite_manager->RenderLoot();
		};

		if(@view_forward_type = MapManager->Type->LATTER_UP & @can_preview_item) {
			@sprite_manager->RenderDistantUp();
		};

		if(@view_type = MapManager->Type->LATTER_UP & @can_show_item) {
			@sprite_manager->RenderUp();
		};

		if(@view_forward_type = MapManager->Type->LATTER_DOWN & @can_preview_item) {
			@sprite_manager->RenderDistantDown();
		};

		if(@view_type = MapManager->Type->LATTER_DOWN & @can_show_item) {
			@sprite_manager->RenderDown();
		};
	}

	method : RenderMap(frame_count : Int) ~ Nil {		
		x_offset := 445;
		for(i := 0; i < MapManager->Type->MAP_SIZE; i += 1;) {
			y_offset := 15;
			for(j := 0; j < MapManager->Type->MAP_SIZE; j += 1;) {
				if(@player_location[1] = i & @player_location[0] = j) {
					select(@player_direction) {
						label MapManager->Direction->NORTH {
							@sprite_manager->RenderMapSprite(2, y_offset, x_offset);
						}

						label MapManager->Direction->SOUTH {
							@sprite_manager->RenderMapSprite(4, y_offset, x_offset);
						}

						label MapManager->Direction->EAST {
							@sprite_manager->RenderMapSprite(3, y_offset, x_offset);
						}

						label MapManager->Direction->WEST {
							@sprite_manager->RenderMapSprite(5, y_offset, x_offset);
						}
					};
				}
				else {
					if(@player_nav_map[j, i] = 0) {
						@sprite_manager->RenderMapSprite(0, y_offset, x_offset);
					}
					else {
						@sprite_manager->RenderMapSprite(1, y_offset, x_offset);
					};
				};
				y_offset += 17;
			};
			x_offset += 17;
		};
	}

	consts Game {
		SCREEN_WIDTH := 768,
		SCREEN_HEIGHT := 512
	}
}