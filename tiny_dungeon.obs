#~
Tiny Dungeon Crawler
Copyright (c) 2020 Randy Hollines
~#

use Collection.Generic;
use Game.SDL2;
use Game.Framework;

class TinyDungeon {
	@framework : GameFramework;
	@sprite_manager : SpriteManager;
	@sound_manager : SoundManager;
	@map_manager : MapManager;

	@player_location : Int[];
	@player_nav_map : Int[,];
	@player_direction : MapManager->Direction;

	@dungeon_views : Int[];

	New() {
		@framework := GameFramework->New(Game->SCREEN_WIDTH, Game->SCREEN_HEIGHT, "Tiny Dungeon");
		@framework->SetClearColor(Color->New(50, 60, 57));

		@sprite_manager := SpriteManager->New("./images", @framework);
		@sound_manager := SoundManager->New("./sounds", @framework);
		@map_manager := MapManager->New("./maps");

		@player_location := Int->New[3];
		@dungeon_views := Int->New[SpriteManager->Clips->DUNGEON_X_CLIPS + 2];
	}

	function : Main(args : String[]) ~ Nil {
		TinyDungeon->New()->Run();
	}

	method : Run() ~ Nil {
		if(<>@map_manager->Load()) {
			"--- Unable to load maps! ---"->ErrorLine();
			return;
		};

		if(<>@sprite_manager->Load()) {
			"--- Unable to load sprites! ---"->ErrorLine();
			return;
		};

		# TODO: add sound manager

		leaving {
			@map_manager->Unload();
			@sprite_manager->Unload();
			@sound_manager->Unload();
		};

		if(@framework->IsOk()) {
			StartLevel();

			frame_count := 0;
			quit := false;
			e := @framework->GetEvent();
			while(<>quit) {
				@framework->FrameStart();
				
				# process input
				while(e->Poll() <> 0) {
					# quit
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					}
					# keyboard
					else if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
				        GetInput(e);
				    };
				};

				Render(frame_count);

				@framework->FrameEnd();

				frame_count += 1;
				if(frame_count >= @framework->GetFps()) {
					frame_count := 0;
				};
			};
		}
		else {
			"--- Error Initializing Environment ---"->ErrorLine();
			return;
		};
	}

	method : StartLevel() ~ Nil {
		@player_direction := MapManager->Direction->NORTH;
		start_location := @map_manager->GetStart();
		@player_location[0] := start_location[0];
		@player_location[1] := start_location[1];

		@player_nav_map := Int->New[MapManager->Type->MAP_SIZE, MapManager->Type->MAP_SIZE];
		@player_nav_map[@player_location[0], @player_location[1]] := 1;

		UpdateView();
	}

	method : GetInput(e : Event) ~ Nil {
		select(e->GetKey()->GetKeysym()->GetScancode()) {
        	label Scancode->SDL_SCANCODE_UP
        	label Scancode->SDL_SCANCODE_W {
        		MoveForward();
        		UpdateView();
        	}

        	label Scancode->SDL_SCANCODE_LEFT
        	label Scancode->SDL_SCANCODE_A {
        		MoveLeft();
        		UpdateView();
        	}

        	label Scancode->SDL_SCANCODE_RIGHT
        	label Scancode->SDL_SCANCODE_D {
        		MoveRight();
        		UpdateView();
        	}
        };
	}

	method : MoveForward() ~ Nil {
		player_view := @map_manager->GetView(@player_direction, @player_location);
		if(IsOpen(player_view[MapManager->View->VIEW_1, MapManager->Side->MIDDLE])) {
			select(@player_direction) {
				label MapManager->Direction->NORTH {
					@player_location[0] -= 1;
				}

				label MapManager->Direction->SOUTH {
					@player_location[0] += 1;
				}

				label MapManager->Direction->EAST {
					@player_location[1] += 1;
				}

				label MapManager->Direction->WEST {
					@player_location[1] -= 1;
				}
			};

			if(@player_nav_map[@player_location[0], @player_location[1]] = 0) {
				@player_nav_map[@player_location[0], @player_location[1]] := 1;
			};			
		};
	}

	method : native : UpdateView() ~ Nil {
# @map_manager->ShowDebugMap(@player_direction, @player_location);

		@map_manager->GetView(@player_direction, @player_location);
		each(i : @dungeon_views) {
			@dungeon_views[i] := -1;
		};

		hash_view := @map_manager->HashView();
		v0 := hash_view[0];
		v1 := hash_view[1];
		v2 := hash_view[2];
		v3 := hash_view[3];
		v4 := hash_view[4];

		blocked := false;

		#
		# V0
		#
		select(v0) {
			# enclosed
			label 2 {
				@dungeon_views[1] := 3;
			}

			# right
			label 3 {
				@dungeon_views[1] := 7;
			}

			# left
			label 6 {
				@dungeon_views[1] := 11;
			}

			# left & right
			label 7 {
				@dungeon_views[1] := 15;
			}
		};

		#
		# V1
		#
		if(v1 <> 0 & v1 <> 1 & v1 <> 4) {	
			select(v1) {
				# enclosed
				label 2 {
					@dungeon_views[2] := 2;
				}

				# right
				label 3 {
					if(v0 = 3) {
						@dungeon_views[1] := 31;
						@dungeon_views[2] := 30;
					}
					else if(v0 = 7) {
						@dungeon_views[1] := 95;
						@dungeon_views[2] := 30;
					}
					else {
						@dungeon_views[2] := 6;
					};
				}

				# left
				label 6 {
					if(v0 = 6) {
						@dungeon_views[1] := 27;
						@dungeon_views[2] := 26;
					}
					else if(v0 = 7) {
						@dungeon_views[1] := 92;
						@dungeon_views[2] := 26;
					}
					else {
						@dungeon_views[2] := 10;
					};
				}

				# left & right
				label 7 {
					if(v0 = 2) {
						@dungeon_views[2] := 34;
					}
					else if(v0 = 3) {
						@dungeon_views[1] := 31;
						@dungeon_views[2] := 117; # 70
					}
					else if(v0 = 6) {
						@dungeon_views[1] := 27;
						@dungeon_views[2] := 119; # 82
					}
					else if(v0 = 7) {
						@dungeon_views[1] := 23;
						@dungeon_views[2] := 22;
					}
					else {
						@dungeon_views[2] := 14;
					};
				}
			};
			
			#
			# V2
			#
			if(v2 <> 0 & v2 <> 1 & v2 <> 4) {
				select(v2) {
					# enclosed
					label 2 {
						if(v1 = 3) {
							if(v0 = 2) {
								@dungeon_views[2] := 114;
							}
							else {
								@dungeon_views[2] := 115;
							};
							@dungeon_views[3] := 1;
						}
						else if(v1 = 6) {
							if(v0 = 2) {
								@dungeon_views[2] := 110;
							}
							else {
								@dungeon_views[2] := 111;
							};
							@dungeon_views[3] := 1;
						}
						else if(v1 = 7) {
							if(v0 = 2) {
								@dungeon_views[2] := 107;
							}
							else {
								@dungeon_views[2] := 118;
							};
							@dungeon_views[3] := 1;
						}
						else {
							@dungeon_views[3] := 1;
						};
					}

					# right
					label 3 {
						if(v1 = 2) {
							@dungeon_views[3] := 61;
						}
						else if(v1 = 3) {
							if(v0 = 2 | v0 = 6) {
								@dungeon_views[3] := 57;
							}
							else {
								@dungeon_views[3] := 29;
							};
						}
						# open
						else if(v1 = 7) {
							@dungeon_views[3] := 29;
						}
						else {
							@dungeon_views[3] := 5;
						};
					}

					# left
					label 6 {
						if(v1 = 2) {
							@dungeon_views[3] := 49;
						}
						else if(v1 = 6) {
							if(v0 = 2 | v0 = 3) {
								@dungeon_views[3] := 45;
							}
							else {
								@dungeon_views[3] := 25;
							};
						}
						# open
						else if(v1 = 7) {
							@dungeon_views[3] := 25;
						}
						else {							
							@dungeon_views[3] := 9;
						};
					}

					# left & right
					label 7 {
						if(v1 = 2) {
							@dungeon_views[3] := 37;
						}
						else if(v1 = 3) {
							@dungeon_views[3] := 93;
						}
						else if(v1 = 6) {
							@dungeon_views[3] := 94;
						}
						else if(v1 = 7) {
							# door way
							if(v0 = 2) {
								@dungeon_views[3] := 33;
							}
							else {
								@dungeon_views[3] := 21;
							};
						}
						else {
							@dungeon_views[3] := 13;
						};
					}
				};

				#
				# V3
				#
				if(v3 <> 0 & v3 <> 1 & v3 <> 4) {
					select(v3) {
						# enclosed
						label 2 {
							if(v2 = 3) {
								if(v1 = 2) {
									@dungeon_views[3] := 112;
									@dungeon_views[4] := 0;
								}
								else {
									@dungeon_views[3] := 113;
									@dungeon_views[4] := 0;
								};
							}
							else if(v2 = 6) {
								if(v1 = 2) {
									@dungeon_views[3] := 108;
									@dungeon_views[4] := 0;
								}
								else {
									@dungeon_views[3] := 109;
									@dungeon_views[4] := 0;
								};
							}
							else if(v2 = 7) {
								if(v1 = 2) {
									@dungeon_views[3] := 13;
								}
								else {
									@dungeon_views[3] := 106;
								};
								@dungeon_views[4] := 0;
							}
							else {
								@dungeon_views[4] := 0;
							};
						}

						# right
						label 3 {
							if(v2 = 2) {
								@dungeon_views[4] := 64;
							}
							else if(v2 = 3) {
								if(v0 = 2 & v1 = 2) {
									@dungeon_views[4] := 60;	
								}
								else if(v0 = 2) {
									@dungeon_views[4] := 56;
								}
								else if(v1 = 2) {
									@dungeon_views[4] := 60;
								}
								else {
									@dungeon_views[4] := 28;
								};
							}
							else if(v2 = 7) {
								@dungeon_views[4] := 28;
							}
							else {
								@dungeon_views[4] := 4;
							};
						}

						# left
						label 6 {
							if(v2 = 2) {
								@dungeon_views[4] := 52;
							}
							else if(v2 = 6) {
								if(v0 = 2 & v1 = 2) {
									@dungeon_views[4] := 48;	
								}
								else if(v0 = 2) {
									@dungeon_views[4] := 44;	
								}
								else if(v1 = 2) {
									@dungeon_views[4] := 48;
								}
								else {
									@dungeon_views[4] := 24;
								};
							}
							else if(v2 = 7) {
								@dungeon_views[4] := 24;
							}
							else {
								@dungeon_views[4] := 8;
							};
						}

						# left & right
						label 7 {
							if(v2 = 2) {
								@dungeon_views[4] := 40;
							}
							else if(v2 = 3) {
								if(v0 = 2) {
									@dungeon_views[4] := 76;
								}
								else {
									@dungeon_views[4] := 99;
								};
							}
							else if(v2 = 6) {
								if(v0 = 2) {
									@dungeon_views[4] := 88;
								}
								else {
									@dungeon_views[4] := 103;
								};
							}
							else if(v2 = 7) {
								# door way
								if(v0 = 2 & v1 = 2) {
									@dungeon_views[4] := 36;
								}
								else if(v0 = 2) {
									@dungeon_views[4] := 32;
								}
								else {
									@dungeon_views[4] := 20;
								};
							}
							else {
								@dungeon_views[4] := 12;
							};
						}
					};
				}
				else {
					@dungeon_views[0] := 17;
					blocked := true;
				};
			}
			else {
				@dungeon_views[0] := 18;
				blocked := true;
			};
		}
		else {
			@dungeon_views[0] := 19;
			blocked := true;
		};

		#
		# Background
		#
		if(<>blocked) {
			select(v4) {
				# enclosed
				label 2, 3, 6, 7 {
					@dungeon_views[0] := 116;
				}

				other {
					@dungeon_views[0] := 18;
				}
			};
		};

		#~
p0 := @dungeon_views[1]; p1 := @dungeon_views[2];
p2 := @dungeon_views[3]; p3 := @dungeon_views[4];
p4 := @dungeon_views[0]; 
"Hash Values:\n\tv0\tv1\tv2\tv3\tv4\n\t-----------------------------------\nView\t{$v0}\t{$v1}\t{$v2}\t{$v3}\t{$v4}\nImage\t{$p0}\t{$p1}\t{$p2}\t{$p3}\t{$p4}"->PrintLine();
		~#
	}

	method : IsOpen(player_view : Int) ~ Bool {
		if(player_view >= MapManager->Type->OPEN & player_view <= MapManager->Type->END) {
			return true;
		};

		return false;
	}

	method : MoveLeft() ~ Nil {
		select(@player_direction) {
			label MapManager->Direction->NORTH {
				@player_direction := MapManager->Direction->WEST;
			}

			label MapManager->Direction->SOUTH {
				@player_direction := MapManager->Direction->EAST;
			}

			label MapManager->Direction->EAST {
				@player_direction := MapManager->Direction->NORTH;
			}

			label MapManager->Direction->WEST {
				@player_direction := MapManager->Direction->SOUTH;
			}
		};
	}

	method : MoveRight() ~ Nil {
		select(@player_direction) {
			label MapManager->Direction->NORTH {
				@player_direction := MapManager->Direction->EAST;
			}

			label MapManager->Direction->SOUTH {
				@player_direction := MapManager->Direction->WEST;
			}

			label MapManager->Direction->EAST {
				@player_direction := MapManager->Direction->SOUTH;
			}

			label MapManager->Direction->WEST {
				@player_direction := MapManager->Direction->NORTH;
			}
		};
	}

	method : Render(frame_count : Int) ~ Nil {
		@framework->Clear();

		RenderDungeon(frame_count);
		RenderMap(frame_count);
		
		@framework->Show();
	}

	method : RenderDungeon(frame_count : Int) ~ Nil {
		each(i : @dungeon_views) {
			@sprite_manager->RenderDungeonSprite(@dungeon_views[i]);
		};
	}

	method : RenderMap(frame_count : Int) ~ Nil {		
		x_offset := 445;
		for(i := 0; i < MapManager->Type->MAP_SIZE; i += 1;) {
			y_offset := 15;
			for(j := 0; j < MapManager->Type->MAP_SIZE; j += 1;) {
				if(@player_location[1] = i & @player_location[0] = j) {
					select(@player_direction) {
						label MapManager->Direction->NORTH {
							@sprite_manager->RenderMapSprite(2, y_offset, x_offset);
						}

						label MapManager->Direction->SOUTH {
							@sprite_manager->RenderMapSprite(4, y_offset, x_offset);
						}

						label MapManager->Direction->EAST {
							@sprite_manager->RenderMapSprite(3, y_offset, x_offset);
						}

						label MapManager->Direction->WEST {
							@sprite_manager->RenderMapSprite(5, y_offset, x_offset);
						}
					};
				}
				else {
					if(@player_nav_map[j, i] = 0) {
						@sprite_manager->RenderMapSprite(0, y_offset, x_offset);
					}
					else {
						@sprite_manager->RenderMapSprite(1, y_offset, x_offset);
					};
				};
				y_offset += 17;
			};
			x_offset += 17;
		};
	}

	consts Game {
		SCREEN_WIDTH := 768,
		SCREEN_HEIGHT := 512
	}
}