#~
Tiny Dungeon Crawler
Copyright (c) 2020 Randy Hollines
~#

use Collection.Generic;
use Game.SDL2;
use Game.Framework;

class TinyDungeon {
	@framework : GameFramework;
	@sprite_manager : SpriteManager;
	@sound_manager : SoundManager;
	@map_manager : MapManager;

	@player_location : Int[];
	@player_direction : MapManager->Direction;

	@dungeon_views : Int[];

	New() {
		@framework := GameFramework->New(Game->SCREEN_WIDTH, Game->SCREEN_HEIGHT, "Tiny Dungeon");
		@framework->SetClearColor(Color->New(50, 60, 57));

		@sprite_manager := SpriteManager->New("./images", @framework);
		@sound_manager := SoundManager->New("./sounds", @framework);
		@map_manager := MapManager->New("./maps");

		@player_location := Int->New[3];
		@dungeon_views := Int->New[SpriteManager->Clips->DUNGEON_X_CLIPS + 2];
	}

	function : Main(args : String[]) ~ Nil {
		TinyDungeon->New()->Run();
	}

	method : Run() ~ Nil {
		if(<>@map_manager->Load()) {
			"--- Unable to load maps! ---"->ErrorLine();
			return;
		};

		if(<>@sprite_manager->Load()) {
			"--- Unable to load sprites! ---"->ErrorLine();
			return;
		};

		# TODO: add sound manager

		leaving {
			@map_manager->Unload();
			@sprite_manager->Unload();
			@sound_manager->Unload();
		};

		if(@framework->IsOk()) {
			StartLevel();

			frame_count := 0;
			quit := false;
			e := @framework->GetEvent();
			while(<>quit) {
				@framework->FrameStart();
				
				# process input
				while(e->Poll() <> 0) {
					# quit
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					}
					# keyboard
					else if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
				        GetInput(e);
				    };
				};

				Render(frame_count);

				@framework->FrameEnd();

				frame_count += 1;
				if(frame_count >= @framework->GetFps()) {
					frame_count := 0;
				};
			};
		}
		else {
			"--- Error Initializing Environment ---"->ErrorLine();
			return;
		};
	}

	method : StartLevel() ~ Nil {
		@player_direction := MapManager->Direction->NORTH;
		start_location := @map_manager->GetStart();
		@player_location[0] := start_location[0];
		@player_location[1] := start_location[1];

		UpdateView();
	}

	method : GetInput(e : Event) ~ Nil {
		select(e->GetKey()->GetKeysym()->GetScancode()) {
        	label Scancode->SDL_SCANCODE_UP
        	label Scancode->SDL_SCANCODE_W {
        		MoveForward();
        		UpdateView();
        	}

        	label Scancode->SDL_SCANCODE_LEFT
        	label Scancode->SDL_SCANCODE_A {
        		MoveLeft();
        		UpdateView();
        	}

        	label Scancode->SDL_SCANCODE_RIGHT
        	label Scancode->SDL_SCANCODE_D {
        		MoveRight();
        		UpdateView();
        	}
        };
	}

	method : MoveForward() ~ Nil {
		player_view := @map_manager->GetView(@player_direction, @player_location);
		if(IsOpen(player_view[MapManager->View->VIEW_1, MapManager->Side->MIDDLE])) {
			select(@player_direction) {
				label MapManager->Direction->NORTH {
					@player_location[0] -= 1;
				}

				label MapManager->Direction->SOUTH {
					@player_location[0] += 1;
				}

				label MapManager->Direction->EAST {
					@player_location[1] += 1;
				}

				label MapManager->Direction->WEST {
					@player_location[1] -= 1;
				}
			};
		};
	}

	method : IsClosedLeftOpenRight(view : MapManager->View, player_view : Int[,]) ~ Bool {
		return <>IsOpen(player_view[view, MapManager->Side->LEFT]) & 
			IsOpen(player_view[view, MapManager->Side->RIGHT]) &
			IsOpen(player_view[view, MapManager->Side->MIDDLE]);				
	}

	method : IsClosedRightOpenLeft(view : MapManager->View, player_view : Int[,]) ~ Bool {
		return IsOpen(player_view[view, MapManager->Side->LEFT]) & 
			<>IsOpen(player_view[view, MapManager->Side->RIGHT]) &
			IsOpen(player_view[view, MapManager->Side->MIDDLE]);				
	}

	method : IsClosedLeftRight(view : MapManager->View, player_view : Int[,]) ~ Bool {
		return <>IsOpen(player_view[view, MapManager->Side->LEFT]) & 
			<>IsOpen(player_view[view, MapManager->Side->RIGHT]) &
			IsOpen(player_view[view, MapManager->Side->MIDDLE]);				
	}

	method : IsOpenLeft(view : MapManager->View, player_view : Int[,]) ~ Bool {
		return IsOpen(player_view[view, MapManager->Side->LEFT]) & 
			IsOpen(player_view[view, MapManager->Side->MIDDLE]);				
	}

	method : IsOpenRight(view : MapManager->View, player_view : Int[,]) ~ Bool {
		return IsOpen(player_view[view, MapManager->Side->RIGHT]) & 
			IsOpen(player_view[view, MapManager->Side->MIDDLE]);				
	}

	method : IsOpenLeftRight(view : MapManager->View, player_view : Int[,]) ~ Bool {
		return IsOpen(player_view[view, MapManager->Side->LEFT]) & 
			IsOpen(player_view[view, MapManager->Side->RIGHT]) & 
			IsOpen(player_view[view, MapManager->Side->MIDDLE]);				
	}

	method : native : UpdateView() ~ Nil {
		player_view := @map_manager->GetView(@player_direction, @player_location, true);
		each(i : @dungeon_views) {
			@dungeon_views[i] := -1;
		};

		is_blocked := false;

		#
		# View 0
		#
		if(IsOpenLeftRight(MapManager->View->VIEW_0, player_view)) {
"V0 [Open to left and right] ---"->PrintLine();
			@dungeon_views[1] := 15;
		}
		else if(IsOpenLeft(View->VIEW_0, player_view)) {
"V0 [Open to left] ---"->PrintLine();
			@dungeon_views[1] := 11;
		}
		else if(IsOpenRight(MapManager->View->VIEW_0, player_view)) {
"V0 [Open to right] ---"->PrintLine();
			@dungeon_views[1] := 7;
		}
		else if(IsOpen(player_view[MapManager->View->VIEW_0, MapManager->Side->MIDDLE])) {
"V0 [Enclosed] ---"->PrintLine();
			@dungeon_views[1] := 3;
		};

		#
		# View 1
		#
		if(IsOpenLeftRight(MapManager->View->VIEW_1, player_view)) {
			# V1: middle, left and right
"V1 [Open to left and right]"->PrintLine();			
			if(IsOpenLeftRight(MapManager->View->VIEW_0, player_view) &
					IsOpenLeftRight(MapManager->View->VIEW_1, player_view) & 
					IsClosedLeftRight(MapManager->View->VIEW_2, player_view)) {
				@dungeon_views[1] := 23;
				@dungeon_views[2] := 94;
"\t*A"->PrintLine();
			}
			else if(IsOpenLeftRight(MapManager->View->VIEW_0, player_view)) {
				@dungeon_views[1] := 23;
				@dungeon_views[2] := 22;
"\tB"->PrintLine();
			}
			else if(IsClosedLeftOpenRight(MapManager->View->VIEW_0, player_view)) {
				@dungeon_views[2] := 70;
"\tC"->PrintLine();
			}
			else if(IsClosedRightOpenLeft(MapManager->View->VIEW_0, player_view)) {
				@dungeon_views[2] := 82;
"\tD"->PrintLine();
			}
			else {
				@dungeon_views[2] := 14;
"\tE"->PrintLine();
			};
		}
		# V1: left
		else if(IsOpenLeft(View->VIEW_1, player_view)) {			
"V1 [Open to left]"->PrintLine();
			if(IsOpenLeft(View->VIEW_0, player_view)) {
				@dungeon_views[1] := 27;
				if(IsOpen(player_view[MapManager->View->VIEW_2, MapManager->Side->MIDDLE])) {
					@dungeon_views[2] := 110;
"\tA"->PrintLine();					
				}
				else {
					@dungeon_views[2] := 26;
"\tB"->PrintLine();					
				};
			}
			else {
				@dungeon_views[2] := 10;
"\tC"->PrintLine();					
			};
		}
		# V1: right
		else if(IsOpenRight(MapManager->View->VIEW_1, player_view)) {
"V1 [Open to right]"->PrintLine();
			if(IsOpenRight(MapManager->View->VIEW_0, player_view)) {
				@dungeon_views[1] := 31;
				if(IsOpen(player_view[MapManager->View->VIEW_2, MapManager->Side->MIDDLE])) {
					@dungeon_views[2] := 114;
"\tA"->PrintLine();					
				}
				else {
					@dungeon_views[2] := 30;
"\tB"->PrintLine();
				};
			}
			else {
				@dungeon_views[2] := 6;
"\tC"->PrintLine();
			};
		}
		# V1: middle
		else if(IsOpen(player_view[MapManager->View->VIEW_1, MapManager->Side->MIDDLE])) {
"V1 [Enclosed]"->PrintLine();
			@dungeon_views[2] := 2;
		}
		else {
"V1 [Blocked]"->PrintLine();
			@dungeon_views[0] := 19;
			is_blocked := true;
		};

		#
		# View 2
		#
		if(<>is_blocked) {
			# V2: middle, left and right
			if(IsOpenLeftRight(MapManager->View->VIEW_2, player_view)) {
"V2 [Open to left and right]"->PrintLine();				
				if(IsOpenLeftRight(MapManager->View->VIEW_1, player_view)) {
					if(IsClosedLeftRight(MapManager->View->VIEW_0, player_view)) {
						@dungeon_views[3] := 33;
"\tA"->PrintLine();
					}
					else if(IsClosedLeftRight(MapManager->View->VIEW_3, player_view)) {
"\t*B"->PrintLine();
					}
					else {
						@dungeon_views[3] := 21;
"\tC"->PrintLine();						
					};
				}
				else {
					if(IsOpenRight(MapManager->View->VIEW_1, player_view)) {
						@dungeon_views[3] := 102;
"\tD"->PrintLine();
					}
					else if(IsOpenLeft(MapManager->View->VIEW_1, player_view)) {
						@dungeon_views[3] := 98;
"\tE"->PrintLine();
					}
					else {
						@dungeon_views[3] := 13;
"\tF"->PrintLine();						
					};
				};
			}
			# V2: left
			else if(IsOpenLeft(View->VIEW_2, player_view)) {
"V2 [Open to left]"->PrintLine();
				if(IsOpenLeft(View->VIEW_1, player_view)) {
					if(IsClosedLeftRight(MapManager->View->VIEW_0, player_view)) {
"\tA"->PrintLine();
						@dungeon_views[3] := 45;
					}
					else if(IsOpenLeft(View->VIEW_0, player_view)) {
						@dungeon_views[3] := 109;
"\t*B"->PrintLine();
					}
					else {
						@dungeon_views[3] := 25;
"\tC"->PrintLine();
					};
				}
				else {
					@dungeon_views[3] := 9;
"\tD"->PrintLine();					
				};
			}
			# V2: right
			else if(IsOpenRight(MapManager->View->VIEW_2, player_view)) {
"V2 [Open to right]"->PrintLine();				
				if(IsOpenRight(MapManager->View->VIEW_1, player_view)) {
					if(IsClosedLeftRight(MapManager->View->VIEW_0, player_view)) {
						@dungeon_views[3] := 57;
"\tA"->PrintLine();
					}
					else if(IsOpenRight(View->VIEW_0, player_view)) {
						@dungeon_views[3] := 113;
"\t*B"->PrintLine();
					}
					else {
						@dungeon_views[3] := 29;
"\tC"->PrintLine();
					};
				}
				else {
"\tD"->PrintLine();
					@dungeon_views[3] := 5;
				};
			}
			# V2: middle
			else if(IsOpen(player_view[MapManager->View->VIEW_2, MapManager->Side->MIDDLE])) {
"V2 [Enclosed]"->PrintLine();
				@dungeon_views[3] := 1;
			}
			else {
"V2 [Blocked]"->PrintLine();
				@dungeon_views[0] := 18;
				is_blocked := true;
			};
		};

		#
		# View 3
		#
		if(<>is_blocked) {
			# V3: middle, left and right
			if(IsOpenLeftRight(MapManager->View->VIEW_3, player_view)) {				
"V3 [Open to left and right]"->PrintLine();
				if(IsOpenLeftRight(MapManager->View->VIEW_1, player_view) & 
						IsOpenLeftRight(MapManager->View->VIEW_2, player_view)) {
					@dungeon_views[4] := 32;
"\tA"->PrintLine();
				}
				else if(IsOpenLeftRight(MapManager->View->VIEW_2, player_view)) {
"\tB"->PrintLine();
					@dungeon_views[4] := 36;
				}
				else if(IsOpenLeftRight(MapManager->View->VIEW_1, player_view)) {
					if(IsClosedLeftRight(MapManager->View->VIEW_0, player_view)) {
						@dungeon_views[4] := 32;
"\tC"->PrintLine();
					}
					else if(IsClosedLeftRight(MapManager->View->VIEW_2, player_view)) {
						@dungeon_views[4] := 40;
"\t*D"->PrintLine();
					}
					else {
						@dungeon_views[4] := 20;
"\tE"->PrintLine();
					};
				}
				else if(IsOpenLeftRight(MapManager->View->VIEW_4, player_view) & 
							IsOpenLeftRight(MapManager->View->VIEW_3, player_view)) {
					@dungeon_views[4] := 40;
"\tF"->PrintLine();					
				}
				else if(IsOpenLeftRight(MapManager->View->VIEW_3, player_view)) {
					@dungeon_views[4] := 12;
"\tG"->PrintLine();
				}
				else {
					@dungeon_views[4] := 36;
"\tH"->PrintLine();
				};
			}
			# V3: left
			else if(IsOpenLeft(View->VIEW_3, player_view)) {				
"V3 [Open to left]"->PrintLine();
				if(IsOpenLeft(View->VIEW_1, player_view)) {
					if(IsClosedLeftRight(MapManager->View->VIEW_0, player_view)) {
						@dungeon_views[4] := 44;
"\tA"->PrintLine();
					}
					else if(IsOpenLeft(MapManager->View->VIEW_3, player_view) & 
								IsOpenRight(MapManager->View->VIEW_3, player_view)) {
						@dungeon_views[4] := 40;
"\t*B"->PrintLine();						
					}
					else if(IsOpenLeft(MapManager->View->VIEW_3, player_view)) {
						@dungeon_views[4] := 52;
"\tC"->PrintLine();
					}
					else if(IsOpenRight(MapManager->View->VIEW_3, player_view)) {
						@dungeon_views[4] := 64;
"\tD"->PrintLine();
					}
					else {
						@dungeon_views[4] := 24;
"\tE"->PrintLine();
					};
				}
				else if(IsOpenLeft(MapManager->View->VIEW_2, player_view)) {
					@dungeon_views[3] := 49;
					@dungeon_views[4] := 48;
"\tF"->PrintLine();					
				}
				else if(IsOpenLeft(MapManager->View->VIEW_3, player_view)) {
					@dungeon_views[4] := 52;
"\tG"->PrintLine();					
				}
				else {
					@dungeon_views[4] := 8;
"\tH"->PrintLine();
				};
			}
			# V3: right
			else if(IsOpenRight(MapManager->View->VIEW_3, player_view)) {
"V3 [Open to right]"->PrintLine();
				if(IsOpenRight(MapManager->View->VIEW_1, player_view)) {
					if(IsClosedLeftRight(MapManager->View->VIEW_0, player_view)) {
						@dungeon_views[4] := 56;
"\tA"->PrintLine();
					}
					else if(IsOpenLeft(MapManager->View->VIEW_3, player_view) & 
								IsOpenRight(MapManager->View->VIEW_3, player_view)) {
						@dungeon_views[4] := 40;
"\t*B"->PrintLine();						
					}
					else if(IsOpenLeft(MapManager->View->VIEW_3, player_view)) {
						@dungeon_views[4] := 52;
"\tC"->PrintLine();
					}
					else if(IsOpenRight(MapManager->View->VIEW_3, player_view)) {
						@dungeon_views[4] := 64;
"\tD"->PrintLine();
					}
					else {
						@dungeon_views[4] := 28;
"\tE"->PrintLine();						
					};
				}
				else if(IsOpenRight(MapManager->View->VIEW_2, player_view)) {
					@dungeon_views[3] := 61;
					@dungeon_views[4] := 60;
"\tF"->PrintLine();					
				}
				else if(IsOpenRight(MapManager->View->VIEW_3, player_view)) {
					@dungeon_views[4] := 64;
"\tG"->PrintLine();		
				}
				else {
"\tH"->PrintLine();					
					@dungeon_views[4] := 4;
				};
			}
			# V3: middle
			else if(IsOpen(player_view[MapManager->View->VIEW_3, MapManager->Side->MIDDLE])) {
"V3 [Enclosed]"->PrintLine();
				@dungeon_views[4] := 0;
			}
			else {
"V3 [Blocked]"->PrintLine();
				@dungeon_views[0] := 17;
				is_blocked := true;
			};
		};

		#
		# View 4
		#
		if(<>is_blocked) {
"V4 [Blocked]"->PrintLine();			
			if(<>IsOpen(player_view[MapManager->View->VIEW_4, MapManager->Side->MIDDLE])) {
				@dungeon_views[0] := 16;
"\tA"->PrintLine();
			}
			else {
				@dungeon_views[0] := 116; # change me!
"\tB"->PrintLine();
			};
		};
        @map_manager->PrintMap(@player_direction, @player_location);
	}

	method : IsOpen(player_view : Int) ~ Bool {
		if(player_view >= MapManager->Type->OPEN & player_view <= MapManager->Type->END) {
			return true;
		};

		return false;
	}


	method : IsVisible(view : MapManager->View, player_view : Int[,]) ~ Bool {
		count := 0;

		for(i := 0; i < 3; i += 1;) {
			if(player_view[view, i] = MapManager->Type->BLOCKED) {
				count += 1;
			};
		};

		return count <> 3;
	}

	method : MoveLeft() ~ Nil {
		select(@player_direction) {
			label MapManager->Direction->NORTH {
				@player_direction := MapManager->Direction->WEST;
			}

			label MapManager->Direction->SOUTH {
				@player_direction := MapManager->Direction->EAST;
			}

			label MapManager->Direction->EAST {
				@player_direction := MapManager->Direction->NORTH;
			}

			label MapManager->Direction->WEST {
				@player_direction := MapManager->Direction->SOUTH;
			}
		};
	}

	method : MoveRight() ~ Nil {
		select(@player_direction) {
			label MapManager->Direction->NORTH {
				@player_direction := MapManager->Direction->EAST;
			}

			label MapManager->Direction->SOUTH {
				@player_direction := MapManager->Direction->WEST;
			}

			label MapManager->Direction->EAST {
				@player_direction := MapManager->Direction->SOUTH;
			}

			label MapManager->Direction->WEST {
				@player_direction := MapManager->Direction->NORTH;
			}
		};
	}

	method : Render(frame_count : Int) ~ Nil {
		@framework->Clear();

		# background
		each(i : @dungeon_views) {
			@sprite_manager->RenderDungeonSprite(@dungeon_views[i]);
		};
#		@sprite_manager->RenderDungeonSprite(100);
		
		@framework->Show();
	}

	consts Game {
		SCREEN_WIDTH := 1024,
		SCREEN_HEIGHT := 512
	}
}