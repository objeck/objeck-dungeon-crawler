use Collection.Generic;
use Game.SDL2;
use Game.Framework;

class TinyDungeon {
	@framework : GameFramework;
	@sprite_manager : SpriteManager;
	@sound_manager : SoundManager;
	@map_manager : MapManager;

	@player_location : Int[];
	@player_direction : MapManager->Direction;

	New() {
		@framework := GameFramework->New(Game->SCREEN_WIDTH, Game->SCREEN_HEIGHT, "Tiny Dungeon");
		@framework->SetClearColor(Color->New(50, 60, 57));

		@sprite_manager := SpriteManager->New("./images", @framework);
		@sound_manager := SoundManager->New("./sounds", @framework);
		@map_manager := MapManager->New("./maps");

		@player_location := Int->New[2];
	}

	function : Main(args : String[]) ~ Nil {
		TinyDungeon->New()->Run();
	}

	method : Debug() ~ Nil {
		start := @map_manager->GetStart();
		y := start[0]; x := start[1];
		"start: {$y},{$x}"->PrintLine();

		view := @map_manager->GetView(MapManager->Direction->WEST, start);
		x := view[2, MapManager->Side->LEFT]; 
		y := view[2, MapManager->Side->MIDDLE]; 
		z := view[2, MapManager->Side->RIGHT];
		"test: {$x},{$y},{$z}"->PrintLine();
	}

	method : Run() ~ Nil {
		if(<>@map_manager->Load()) {
			"--- Unable to load maps! ---"->ErrorLine();
			return;
		};

		if(<>@sprite_manager->Load()) {
			"--- Unable to load sprites! ---"->ErrorLine();
			return;
		};

		leaving {
			@map_manager->Unload();
			@sprite_manager->Unload();
			@sound_manager->Unload();
		};

		if(@framework->IsOk()) {
			# TODO: disable me
			Debug();

			StartLevel();

			frame_count := 0;
			quit := false;
			e := @framework->GetEvent();
			while(<>quit) {
				@framework->FrameStart();
				
				# process input
				while(e->Poll() <> 0) {
					# quit
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					}
					# keyboard
					else if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
				        GetInput(e);
				    };
				};

				Render(frame_count);

				@framework->FrameEnd();

				frame_count += 1;
				if(frame_count >= @framework->GetFps()) {
					frame_count := 0;
				};
			};
		}
		else {
			"--- Error Initializing Environment ---"->ErrorLine();
			return;
		};
	}

	method : StartLevel() ~ Nil {
		@player_direction := MapManager->Direction->NORTH;

		start_location := @map_manager->GetStart();
x := start_location[0]; y := start_location[1];
"start: {$x},{$y}"->PrintLine();
		@player_location[0] := start_location[0];
		@player_location[1] := start_location[1];
	}

	method : GetInput(e : Event) ~ Nil {
		select(e->GetKey()->GetKeysym()->GetScancode()) {
        	label Scancode->SDL_SCANCODE_UP
        	label Scancode->SDL_SCANCODE_W {
        		MoveForward();
        	}

        	label Scancode->SDL_SCANCODE_LEFT
        	label Scancode->SDL_SCANCODE_A {
        		MoveLeft();
        	}

        	label Scancode->SDL_SCANCODE_RIGHT
        	label Scancode->SDL_SCANCODE_D {
        		MoveRight();
        	}
        };
	}

	method : MoveForward() ~ Nil {
		player_view := @map_manager->GetView(@player_direction, @player_location, true);
		if(player_view[MapManager->View->VIEW_1, MapManager->Side->MIDDLE] = MapManager->Type->CLEAR) {
			select(@player_direction) {
				label MapManager->Direction->NORTH {
					@player_location[0] -= 1;
				}

				label MapManager->Direction->SOUTH {
					@player_location[0] += 1;
				}

				label MapManager->Direction->EAST {
					@player_location[1] += 1;
				}

				label MapManager->Direction->WEST {
					@player_location[1] -= 1;
				}
			};
		};
	}

	method : MoveLeft() ~ Nil {
		select(@player_direction) {
			label MapManager->Direction->NORTH {
			}

			label MapManager->Direction->SOUTH {
			}

			label MapManager->Direction->EAST {
			}

			label MapManager->Direction->WEST {
			}
		};
	}

	method : MoveRight() ~ Nil {
		
	}

	method : Render(frame_count : Int) ~ Nil {
		@framework->Clear();

		# background
		@sprite_manager->GetDungeonSprites()->Render(20);


		@sprite_manager->GetDungeonSprites()->Render(3);
		@sprite_manager->GetDungeonSprites()->Render(2);
		@sprite_manager->GetDungeonSprites()->Render(9); # 1
		@sprite_manager->GetDungeonSprites()->Render(0);
		

		@framework->Show();
	}

	consts Game {
		SCREEN_WIDTH := 1280,
		SCREEN_HEIGHT := 720
	}
}