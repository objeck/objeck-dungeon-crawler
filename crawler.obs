use Game.SDL2;
use Game.Framework;
use System.IO.File;

class Dungeon {
	@framework : GameFramework;

	@images : AnimatedImageSprite;
	@image_index : Int;
	@image_max : Int;

	@map : Char[,];

	@map_start : Int[];
	@map_end : Int[];

	@player_pos : Int[];
	@player_dir : Direction;
	
	function : Main(args : String[]) ~ Nil {
		Dungeon->New()->Run();
	}

	New() {
		@framework := GameFramework->New(ScreenConsts->SCREEN_WIDTH, ScreenConsts->SCREEN_HEIGHT, "Dungeon");
		@framework->SetClearColor(Color->New(0, 0, 0));
		
		tunnel_path := "./media/artwork.png";
		@image_max := ScreenConsts->IMAGE_MAX;
		@images := @framework->AddAnimatedImageSprite(tunnel_path);	
		for(i := 0; i < @image_max; i += 1;) {
			@images->AddClip(Rect->New(i * 400, 0, 400, 300));
		};
		@images->SetTop(16);
		@images->SetLeft(16);

		LoadMap();
	}
	
	method : LoadMap() ~ Nil {
		map_path := "./media/debug.dat";
		map_file := FileReader->New(map_path);
		leaving {
			map_file->Close();
		};
		
		size_line := map_file->ReadString();		
		rows := cols := size_line->ToInt();

		@map := Char->New[rows, cols];
		@map_start := Int->New[2];
		@map_end := Int->New[2];

		for(i := 0; i < rows; i += 1;) {
			line := map_file->ReadString();
			if(line->Size() <> cols) {
				"--- Invalid map cols! ---"->ErrorLine();
				Runtime->Exit(1);
			};

			each(j : line) {
				value := line->Get(j);				
				if(value = 'S') {
					@map_start[0] := i;
					@map_start[1] := j;
				}
				else if(value = 'E') {
					@map_end[0] := i;
					@map_end[1] := j;	
				};
				
				@map[i,j] := value;
			};
		};

		@image_index := 0;
		@player_pos := @map_start;
		@player_dir := Direction->NORTH;

		UpdateView();
	}

	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			e := @framework->GetEvent();
			
			frame_count := 0;
			quit := false;
			while(<>quit) {
				@framework->FrameStart();
				
				# process input
				while(e->Poll() <> 0) {
					# quit
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					}
					# keyboard
					else if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
				        GetInput(e);
				    };
				};

				Render(frame_count);

				@framework->FrameEnd();

				frame_count += 1;
				if(frame_count >= @framework->GetFps()) {
					frame_count := 0;
				};
			};
		}
		else {
			"--- Error Initializing Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@framework->Quit();
		};
	}

	method : GetInput(e : Event) ~ Nil {
        select(e->GetKey()->GetKeysym()->GetScancode()) {
        	label Scancode->SDL_SCANCODE_UP:
        	label Scancode->SDL_SCANCODE_W: {
        		MoveForwad();
        	}

        	label Scancode->SDL_SCANCODE_LEFT:
        	label Scancode->SDL_SCANCODE_A: {
        		select(@player_dir) {
        			label Direction->NORTH {
        				@player_dir := Direction->WEST;
        			}

        			label Direction->SOUTH {
        				@player_dir := Direction->EAST;
        			}

        			label Direction->EAST {
        				@player_dir := Direction->NORTH;
        			}

        			label Direction->WEST {
        				@player_dir := Direction->SOUTH;
        			}
        		};
        	}

        	label Scancode->SDL_SCANCODE_RIGHT:
        	label Scancode->SDL_SCANCODE_D: {
 				select(@player_dir) {
        			label Direction->NORTH {
        				@player_dir := Direction->EAST;
        			}

        			label Direction->SOUTH {
        				@player_dir := Direction->WEST;
        				
        			}

        			label Direction->EAST {
        				@player_dir := Direction->SOUTH;
        			}

        			label Direction->WEST {
        				@player_dir := Direction->NORTH;
        			}
        		};	
        	}
        };
	}

	method : Render(frame_count : Int) ~ Nil {
		@framework->Clear();

		@images->Render(@image_index);

		@framework->Show();
	}

	method : MoveForwad() ~ Nil {
		map_dimensions := @map->Size();		
		map_dimension_x := map_dimensions[1];
		map_dimension_y := map_dimensions[0];

		player_x := @player_pos[1];
		player_y := @player_pos[0];

		# check if we can move forward
		if(player_y - 1 < map_dimension_y & @map[player_y - 1, player_x] = '@') {
			@player_pos[0] := --player_y;
			UpdateView();			
		};
	}

	method : UpdateView() ~ Nil {
		player_x := @player_pos[1];
		player_y := @player_pos[0];

		map_dimensions := @map->Size();		
		map_dimension_x := map_dimensions[1];
		map_dimension_y := map_dimensions[0];

		player_x := @player_pos[1];
		player_y := @player_pos[0];

		# check if we can move forward
		forward_dist := 0;
		if(player_y - 1 > -1) {
			select(@map[player_y - 1, player_x]) {
				label '@':
				label 'S':
				label 'E': {
					forward_dist += 1;
				}
			};
		};

		if(player_y - 2 > -1) {
			select(@map[player_y - 2, player_x]) {
				label '@':
				label 'S':
				label 'E': {
					forward_dist += 1;
				}
			};
		};

		open_left := open_right := false;
		if(player_x - 1 > -1) {
			select(@map[player_y, player_x - 1]) {
				label '@':
				label 'S':
				label 'E': {
					open_left := true;
				}
			};
		};

		if(player_x + 1 < map_dimension_x) {
			select(@map[player_y, player_x + 1]) {
				label '@':
				label 'S':
				label 'E': {
					open_right := true;
				}
			};
		};

		if(@player_dir = Direction->NORTH) {
			# distance 0
			if(forward_dist = 0 & open_left & open_right) {
				@image_index := 0;
			}
			else if(forward_dist = 0 & open_left & <>open_right) {
				@image_index := 1;
			}
			else if(forward_dist = 0 & <>open_left & open_right) {
				@image_index := 2;
			}
			else if(forward_dist = 0 & <>open_left & <>open_right) {
				@image_index := 3;
			}
			# distance 1
			else if(forward_dist = 1 & open_left & open_right) {
				@image_index := 6;
			}
			else if(forward_dist = 1 & open_left & open_right) {
				@image_index := 8;
			}
			else if(forward_dist = 1 & open_left & <>open_right) {
				@image_index := 9;
			}		
			else if(forward_dist = 1 & <>open_left & open_right) {
				@image_index := 10;
			}
			else if(forward_dist = 1 & <>open_left & <>open_right) {
				@image_index := 7;
			}
			# distance 2
			else if(forward_dist = 2 & <>open_left & <>open_right) {
				@image_index := 11;
			};
		}
		else if(@player_dir = Direction->EAST) {
"-- East --"->PrintLine();
		}
		else if(@player_dir = Direction->SOUTH) {
"-- South --"->PrintLine();
		}
		else if(@player_dir = Direction->WEST) {
"-- West --"->PrintLine();
		};

		"view: index={$@image_index}; forward={$forward_dist}, open_left={$open_left}, open_right={$open_right}"->PrintLine();

		ShowMap();
	}

	method : ShowMap() ~ Nil {
		map_dimensions := @map->Size();

		player_x := @player_pos[1];
		player_y := @player_pos[0];

		for(i := 0; i < map_dimensions[0]; i += 1;) {
			for(j := 0; j < map_dimensions[0]; j += 1;) {
				value := @map[i,j];
				if(i = player_y & j = player_x) {
					value := 'X';
				};
				"{$value} "->Print();
			};
			"\n"->Print();
		};
		"--- {$player_x},{$player_y} ---"->PrintLine();
	}
}

consts ScreenConsts {
	SCREEN_WIDTH := 800,
	SCREEN_HEIGHT := 600,
	IMAGE_MAX := 13
}

enum Direction {
	NORTH,
	SOUTH,
	EAST,
	WEST
}