#~
Tiny Dungeon Crawler
Copyright (c) 2020 Randy Hollines
~#

use System.Concurrency;
use Collection.Generic;
use Game.SDL2;
use Game.Framework;
use System.IO.File;

class Dungeon {
	@framework : GameFramework;

	# --- player stuff ---
	@player : Player;
	@player_pos : Int[];
	@player_dir : Direction;
	@player_health_percent : Float;
	@take_item_id : Char;
	@show_character_sheet : Bool;

	# --- monster stuff ---
	@monster : Entity;

	# --- dungeon stuff ---
	@maps : Maps;
	@dungeon_map : Char[,];
	@dungeon_map_start : Int[];

	@dungeon_images : AnimatedImageSprite;
	@dungeon_image_index : Int;

	@treasure_images : AnimatedImageSprite;
	@treasure_image_index : Int;

	@map_sheet_images : AnimatedImageSprite;

	@monster_images : AnimatedImageSprite;
	@monster_image_index : Int;
	@is_forward_0 : Bool;
	@forward_1_type : MapType;

	@map_blocks : AnimatedImageSprite;
	@dungeon_map_icon_index : Int;

	@action_icons : AnimatedImageSprite;
	@action_icon_index : Int;

	# --- text stuff ---
	@stat_ability_text : TextSprite;
	@stat_experience_text : TextSprite;
	@potion_text : TextSprite;
	@tent_text : TextSprite;
	@text_white_color : Color;
	@text_red_color : Color;

	# --- timers ---
	@attack_timer : Int;
	@potion_timer : Int;
	@spell_timer : Int;
	@take_timer : Int;
	@rest_timer : Int;

	# --- sound ---
	@music : MixMusic;
	@player_attack_chunk : MixChunk;
	@monster_die_chunk : MixChunk;
	@potion_chunk : MixChunk;
	@tresure_chunk : MixChunk;

	function : Main(args : String[]) ~ Nil {
		Entity->Init();
		Dungeon->New()->Run();
	}

	New() {
		@player := Player->New();

		@framework := GameFramework->New(Game->SCREEN_WIDTH, Game->SCREEN_HEIGHT, "Tiny Dungeon");
		@framework->SetClearColor(Color->New(20, 51, 6));
		
		LoadSprites();
		LoadSounds();
		LoadText();

		@maps := Maps->New();
		NewLevel();
	}

	method : public : PlayTresure() ~ Nil {
		@tresure_chunk->PlayChannel(-1, 0);
	}

	method : public : PlayPotion() ~ Nil { 
		@potion_chunk->PlayChannel(-1, 0);
	}	

	method : LoadSprites() ~ Nil {
		# load sprite sheets
		@dungeon_images := @framework->AddAnimatedImageSprite("./media/dungeon.png");
		for(i := 0; i < Game->DUNGEON_IMAGE_MAX; i += 1;) {
			@dungeon_images->AddClip(Rect->New(i * 410, 0, 410, 310));
		};
		@dungeon_images->SetTop(35);
		@dungeon_images->SetLeft(35);

		@treasure_images := @framework->AddAnimatedImageSprite("./media/treasure.png");
		for(i := 0; i < Game->DUNGEON_IMAGE_MAX; i += 1;) {
			@treasure_images->AddClip(Rect->New(i * 410, 0, 410, 310));
		};
		@treasure_images->SetTop(35);
		@treasure_images->SetLeft(35);

		@monster_images := @framework->AddAnimatedImageSprite("./media/monsters.png");
		for(i := 0; i < Game->MONSTER_IMAGE_MAX; i += 1;) {
			@monster_images->AddClip(Rect->New(i * 400, 0, 400, 300));
		};

		@map_blocks := @framework->AddAnimatedImageSprite("./media/map_blocks.png");
		for(i := 0; i < Game->MAP_ICON_MAX; i += 1;) {
			@map_blocks->AddClip(Rect->New(i * 27, 0, 27, 27));
		};
		@map_blocks->SetTop(10);
		@map_blocks->SetLeft(10);

		@action_icons := @framework->AddAnimatedImageSprite("./media/action_icons.png");
		for(i := 0; i < Game->ACTIONS_ICON_MAX; i += 1;) {
			@action_icons->AddClip(Rect->New(i * 52, 0, 52, 52));
		};

		@map_sheet_images := @framework->AddAnimatedImageSprite("./media/map_sheet.png");
		for(i := 0; i < Game->MAP_SHEET_MAX; i += 1;) {
			@map_sheet_images->AddClip(Rect->New(i * 300, 0, 300, 300));
		};
	}

	method : LoadSounds() ~ Nil {
		# load music and sounds
		sound_path := "./media/music.wav";
		@music := MixMusic->New(sound_path);
		if(@music->IsNull()) {
			"--- Cannot load music: '{$sound_path}'! ---"->ErrorLine();
			Runtime->Exit(1);
		};

		sound_path := "./media/player_attack.wav";
		@player_attack_chunk := MixChunk->New(sound_path);
		if(@player_attack_chunk->IsNull()) {
			"--- Cannot load sound: '{$sound_path}'! ---"->ErrorLine();
			Runtime->Exit(1);
		};

		sound_path := "./media/monster_die.wav";
		@monster_die_chunk := MixChunk->New(sound_path);
		if(@monster_die_chunk->IsNull()) {
			"--- Cannot load sound: '{$sound_path}'! ---"->ErrorLine();
			Runtime->Exit(1);
		};

		sound_path := "./media/potion.wav";
		@potion_chunk := MixChunk->New(sound_path);
		if(@potion_chunk->IsNull()) {
			"--- Cannot load sound: '{$sound_path}'! ---"->ErrorLine();
			Runtime->Exit(1);
		};

		sound_path := "./media/treasure.wav";
		@tresure_chunk := MixChunk->New(sound_path);
		if(@tresure_chunk->IsNull()) {
			"--- Cannot load sound: '{$sound_path}'! ---"->ErrorLine();
			Runtime->Exit(1);
		};
	}

	method : LoadText() ~ Nil {
		# set screen text
		@text_white_color := Color->New(249, 249, 249);
		@text_red_color := Color->New(255, 0, 56);

		hp := @player->GetHp();
		max_hp := @player->GetMaxHp();
		attack := @player->GetAttack();
		defense := @player->GetDefense();
		experience := @player->GetExperince();
		gold := @player->GetGold();
		level := @player->GetLevel();
		potion_count := @player->GetPotionCount();
		tent_count := @player->GetTentCount();

		@stat_ability_text := @framework->AddTextSprite();
		@stat_ability_text->RenderedText("HP={$hp}/{$max_hp}, EXP={$experience}", @text_white_color);

		@stat_experience_text := @framework->AddTextSprite();
		@stat_experience_text->RenderedText("G={$gold}, LVL={$level}", @text_white_color);

		@potion_text := @framework->AddTextSprite();
		@potion_text->RenderedText("{$potion_count}", @text_white_color);
		
		@tent_text := @framework->AddTextSprite();
		@tent_text->RenderedText("{$tent_count}", @text_white_color);
	}
	
	# --- Game Loop ---
	method : Run() ~ Nil {
		leaving {
			@music->Free();
			@player_attack_chunk->Free();
			@monster_die_chunk->Free();
			@tresure_chunk->Free();
			@potion_chunk->Free();
			@framework->Quit();
		};

		if(@framework->IsOk()) {
			if(MixMusic->Playing()) {
				MixMusic->Resume();
			}
			else {
				@music->FadeInMusic(-1, 2000);
				MixMusic->VolumeMusic(4);
				Mixer->Volume(-1, 6);
			};

			frame_count := 0;
			quit := false;
			e := @framework->GetEvent();
			while(<>quit) {
				@framework->FrameStart();
				
				# process input
				while(e->Poll() <> 0) {
					# quit
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					}
					# keyboard
					else if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
				        GetInput(e);
				    };
				};

				Render(frame_count);

				@framework->FrameEnd();

				frame_count += 1;
				if(frame_count >= @framework->GetFps()) {
					frame_count := 0;
				};
			};
		}
		else {
			"--- Error Initializing Environment ---"->ErrorLine();
			return;
		};
	}

	# --- Input Logic ---

	method : GetInput(e : Event) ~ Nil {
        select(e->GetKey()->GetKeysym()->GetScancode()) {
        	label Scancode->SDL_SCANCODE_UP:
        	label Scancode->SDL_SCANCODE_W: {
        		if(<>@monster <> Nil) {
	        		if(MoveForwad() & Float->Random() < 0.25 &  
	        				GetSpecialPosition(@player_pos[0], @player_pos[1]) <> MapType->TRESURE & 
	        				GetSpecialPosition(@player_pos[0], @player_pos[1]) <> MapType->POTION) {
	        			StartFight();
	        		}
	        		else {
	        			@monster := Nil;
	        		};

	        		if(GetSpecialPosition(@player_pos[0], @player_pos[1]) = MapType->END) {
	        			NewLevel();
	        		}
	        		else {
	        			UpdateDungeonView();
	        		};
	        	};
        	}

        	label Scancode->SDL_SCANCODE_LEFT:
        	label Scancode->SDL_SCANCODE_A: {
        		if(@monster = Nil) {
	        		select(@player_dir) {
	        			label Direction->NORTH {
	        				@player_dir := Direction->WEST;
	        			}

	        			label Direction->SOUTH {
	        				@player_dir := Direction->EAST;
	        			}

	        			label Direction->EAST {
	        				@player_dir := Direction->NORTH;
	        			}

	        			label Direction->WEST {
	        				@player_dir := Direction->SOUTH;
	        			}
	        		};

	        		UpdateDungeonView();
	        	};
        	}

        	label Scancode->SDL_SCANCODE_RIGHT:
        	label Scancode->SDL_SCANCODE_D: {
        		if(@monster = Nil) {
	 				select(@player_dir) {
	        			label Direction->NORTH {
	        				@player_dir := Direction->EAST;
	        			}

	        			label Direction->SOUTH {
	        				@player_dir := Direction->WEST;
	        				
	        			}

	        			label Direction->EAST {
	        				@player_dir := Direction->SOUTH;
	        			}

	        			label Direction->WEST {
	        				@player_dir := Direction->NORTH;
	        			}
	        		};

	        		UpdateDungeonView();
	        	};
        	}

        	# sword
        	label Scancode->SDL_SCANCODE_SPACE: {
        		if(@monster <> Nil) {
        			@attack_timer := 20;
        			Fight(AttackType->SWORD);
        		};
        	}

        	# rest
        	label Scancode->SDL_SCANCODE_R: {
				if(@monster = Nil & @player->HasTent()) {
					@rest_timer := 100;
					@player->UseTent();
				};
        	}

        	# rest
        	label Scancode->SDL_SCANCODE_T: {
        		@take_timer := 10;
				if(@monster = Nil) {
					if(@player->TakeItem(@take_item_id, @self)) {
						player_x := @player_pos[1];
						player_y := @player_pos[0];
						@dungeon_map[player_y, player_x] := '0';
					};
				};
        	}

        	# potion
        	label Scancode->SDL_SCANCODE_P: {
        		@potion_timer := 10;
				@player->UsePotion();
				if(@monster <> Nil) {
					Fight(AttackType->POTION);
				};
        	}

        	# spell
        	label Scancode->SDL_SCANCODE_S: {
        		@spell_timer := 10;
        		@show_character_sheet := @show_character_sheet ? false : true;
        	}
        };
	}

	# --- Render Logic ---

	method : Render(frame_count : Int) ~ Nil {
		@framework->Clear();

		RenderDungeon(frame_count);
		RenderTresure(frame_count);
		RenderMonster(frame_count);	
		RenderStats(frame_count);
		RenderMap(frame_count);
		RenderCharacterSheet(frame_count);
		
		@framework->Show();
	}

	method : RenderCharacterSheet(frame_count : Int) ~ Nil {
		if(@show_character_sheet) {
			@map_sheet_images->SetTop(75);
			@map_sheet_images->SetLeft(175);

			@map_sheet_images->Render(1);
		};
	}

	method : RenderStats(frame_count : Int) ~ Nil {
		hp := @player->GetHp();
		max_hp := @player->GetMaxHp();
		attack := @player->GetAttack();
		defense := @player->GetDefense();
		experience := @player->GetExperince();
		gold := @player->GetGold();
		level := @player->GetLevel();
		potion_count := @player->GetPotionCount();
		tent_count := @player->GetTentCount();

		if(hp->As(Float) / max_hp->As(Float) < 0.25) {
			@stat_ability_text->RenderedText("HP={$hp}/{$max_hp}, EXP={$experience}", @text_red_color);
		}
		else {
			@stat_ability_text->RenderedText("HP={$hp}/{$max_hp}, EXP={$experience}", @text_white_color);
		};
		
		@stat_ability_text->Render(495, 35);

		@stat_experience_text->RenderedText("G={$gold}, LVL={$level}", @text_white_color);
		@stat_experience_text->Render(495, 360);

		@potion_text->RenderedText("{$potion_count}", @text_white_color);
		@potion_text->Render(150, 405);

		@tent_text->RenderedText("{$tent_count}", @text_white_color);
		@tent_text->Render(325, 405);
	}

	method : RenderDungeon(frame_count : Int) ~ Nil {
		if(@attack_timer > 0) {
			@treasure_images->Render(1);
		}
		else if(@rest_timer > 0) {
			@treasure_images->Render(0);	
		}
		else {
			@dungeon_images->Render(@dungeon_image_index);
		};

		# TOOD: update button logic

		# -- attack --
		@action_icons->SetTop(350);
		@action_icons->SetLeft(65);
		if(@attack_timer > 0) {
	    	@action_icons->Render(4);
	    }
	    else {
	    	@action_icons->Render(0);
	    };

	    # -- potion --
	    @action_icons->SetTop(350);
		@action_icons->SetLeft(125);
		if(@potion_timer > 0) {
	    	@action_icons->Render(4);
	    }
	    else {
	    	@action_icons->Render(1);
	    };

		# -- spell --
	    @action_icons->SetTop(350);
		@action_icons->SetLeft(190);
		if(@spell_timer > 0) {
	    	@action_icons->Render(4);
	    }
	    else {
	    	@action_icons->Render(2);
	    };

		# -- take --
		@action_icons->SetTop(350);
		@action_icons->SetLeft(245);
		if(@take_timer > 0) {
	    	@action_icons->Render(4);
	    }
	    else {
	    	@action_icons->Render(9);
	    };

		# -- rest --
		@action_icons->SetTop(350);
		@action_icons->SetLeft(305);
		if(@rest_timer > 0) {
	    	@action_icons->Render(4);
	    }
	    else {
	    	@action_icons->Render(3);
	    };
	}

	# map codes
	#	tunnel:		'@' -> '0'
	#	start:		'S' -> '1'
	#	end:		'E' -> '2'
	#	treasure:	'T' -> '3'
	#	potion:		'P' -> '4'
	method : RenderTresure(frame_count : Int) ~ Nil {
		if(@forward_1_type = MapType->TRESURE) {
			@treasure_images->Render(3);
		}
		else if(@forward_1_type = MapType->POTION) {
			@treasure_images->Render(5);
		}
		else if(@dungeon_image_index = 3) {
			player_x := @player_pos[1];
			player_y := @player_pos[0];
			
			value := @dungeon_map[player_y, player_x];
			if(value = 'T' | value = '3') {
				@treasure_images->Render(2);
				@take_item_id := 'T';
			}
			else if(value = 'P' | value = '4') {
				@treasure_images->Render(4);
				@take_item_id := 'P';
			}
			else {
				@can_take := '\0';
			};
		}
		else {
			@can_take := '\0';
		};
	}

	method : RenderMonster(frame_count : Int) ~ Nil {
		if(@monster <> Nil) {
			if(frame_count % 30 = 0) {
				@monster_image_index += 1;
				if(@monster_image_index >= @monster->GetImageIndex() + 3) {
					@monster_image_index := @monster->GetImageIndex();
				};
			};

			if(@is_forward_0 & @player->GetImageIndex() < 6) {
				@monster_images->SetTop(85);
			}
			else {
				@monster_images->SetTop(35);
			};
			@monster_images->SetLeft(40);
			@monster_images->Render(@monster_image_index);

			@action_icons->SetTop(50);
			@action_icons->SetLeft(62);
			monster_health_percent := @monster->GetHpPercentage();
			if(monster_health_percent > 0.75) {
				@action_icons->Render(5);
			}
			else if(monster_health_percent <= 0.75 & monster_health_percent > 0.50) {
				@action_icons->Render(6);
			}
			else if(monster_health_percent <= 0.50 & monster_health_percent > 0.25) {
				@action_icons->Render(7);
			}
			else {
				@action_icons->Render(8);
			};
		};

		# timers
		if(@attack_timer > 0) {
			@attack_timer -= 1;
		};

		if(@potion_timer > 0) {
			@potion_timer -= 1;
		};

		if(@spell_timer > 0) {
			@spell_timer -= 1;
		};

		if(@rest_timer > 0) {
			@rest_timer -= 1;
		};

		if(@take_timer > 0) {
			@take_timer -= 1;
		};
	}

	method : RenderMap(frame_count : Int) ~ Nil {
		top := 77;
		left := 499;
		inc := 29;

		map_dimensions := @dungeon_map->Size();

		player_x := @player_pos[1];
		player_y := @player_pos[0];

		@map_sheet_images->SetTop(55);
		@map_sheet_images->SetLeft(475);
		@map_sheet_images->Render(0);

		for(i := 0; i < map_dimensions[0]; i += 1;) {
			for(j := 0; j < map_dimensions[0]; j += 1;) {
				value := @dungeon_map[i,j];

				@map_blocks->SetTop(top);
				@map_blocks->SetLeft(left);

				if(i = player_y & j = player_x) {
					select(@player_dir) {
	        			label Direction->NORTH {
	        				@map_blocks->SetAngle(0);
	        				@map_blocks->Render(1);
	        			}

						label Direction->EAST {
	        				@map_blocks->SetAngle(90);
	        				@map_blocks->Render(1);
	        			}
	        			label Direction->SOUTH {
	        				@map_blocks->SetAngle(180);
	        				@map_blocks->Render(1);
	        			}

	        			label Direction->WEST {
	        				@map_blocks->SetAngle(270);
	        				@map_blocks->Render(1);
	        			}
	        		};
				}
				else if(value >= '0' & value <= '4') {					
					@map_blocks->Render(0);
				};
				left += inc;
			};
			top += inc;
			left := 499;
		};
	}

	# player movement logic
	method : MoveForwad() ~ Bool {
		map_dimensions := @dungeon_map->Size();

		map_dimension_x := map_dimensions[1];
		map_dimension_y := map_dimensions[0];

		player_x := @player_pos[1];
		player_y := @player_pos[0];

		# mark title discovered
		UpdateMapPosition(player_y, player_x);

		if(Direction->NORTH = @player_dir & player_y - 1 > -1 & 
				CheckPlayerPosition(player_y - 1, player_x)) {
			@player_pos[0] := player_y - 1;
			return true;
		}
		else if(Direction->EAST = @player_dir & player_x + 1 < map_dimension_x & 
				CheckPlayerPosition(player_y, player_x + 1)) {
			@player_pos[1] := player_x + 1;
			return true;
		}
		else if(Direction->SOUTH = @player_dir & player_y + 1 < map_dimension_y & 
				CheckPlayerPosition(player_y + 1, player_x)) {
			@player_pos[0] := player_y + 1;
			return true;
		}
		else if(Direction->WEST = @player_dir & player_x - 1 > -1 & 
				CheckPlayerPosition(player_y, player_x - 1)) {
			@player_pos[1] := player_x - 1;
			return true;
		};

		if(GetSpecialPosition(@player_pos[0], @player_pos[1]) = MapType->OTHER) {
			return true;
		};

		return false;
	}

	method : UpdateDungeonView() ~ Nil {
		player_x := @player_pos[1];
		player_y := @player_pos[0];

		is_forward_2 : Bool; is_forward_1 : Bool; 
		is_left_1 : Bool; is_left_0 : Bool;
		is_right_1 : Bool; is_right_0 : Bool;
		
		if(Direction->NORTH = @player_dir) {
			# forward
			is_forward_2 := CheckPlayerPosition(player_y - 2, player_x) & CheckPlayerPosition(player_y - 1, player_x);
			is_forward_1 := CheckPlayerPosition(player_y - 1, player_x);
			@forward_1_type := GetSpecialPosition(player_y - 1, player_x);
			@is_forward_0 := <>is_forward_2 & <>is_forward_1 & CheckPlayerPosition(player_y, player_x);
			# left
			is_left_1 := is_forward_1 & CheckPlayerPosition(player_y - 1, player_x - 1);
			is_left_0 := CheckPlayerPosition(player_y, player_x - 1);
			# right
			is_right_1 := is_forward_1 & CheckPlayerPosition(player_y - 1, player_x + 1);
			is_right_0 := CheckPlayerPosition(player_y, player_x + 1);
		}
		else if(Direction->EAST = @player_dir) {
			# forward
			is_forward_2 := CheckPlayerPosition(player_y, player_x + 2) & CheckPlayerPosition(player_y, player_x + 1);
			is_forward_1 := CheckPlayerPosition(player_y, player_x + 1);
			@forward_1_type := GetSpecialPosition(player_y, player_x + 1);
			@is_forward_0 := <>is_forward_2 & <>is_forward_1 & CheckPlayerPosition(player_y, player_x);
			# left
			is_left_1 := is_forward_1 & CheckPlayerPosition(player_y - 1, player_x + 1);
			is_left_0 := CheckPlayerPosition(player_y - 1, player_x);
			# right
			is_right_1 := is_forward_1 & CheckPlayerPosition(player_y + 1, player_x + 1);
			is_right_0 := CheckPlayerPosition(player_y + 1, player_x);
		}
		else if(Direction->SOUTH = @player_dir) {
			# forward
			is_forward_2 := CheckPlayerPosition(player_y + 2, player_x) & CheckPlayerPosition(player_y + 1, player_x);
			is_forward_1 := CheckPlayerPosition(player_y + 1, player_x);
			@forward_1_type := GetSpecialPosition(player_y + 1, player_x);
			@is_forward_0 := <>is_forward_2 & <>is_forward_1 & CheckPlayerPosition(player_y, player_x);
			# left
			is_left_1 := is_forward_1 & CheckPlayerPosition(player_y + 1, player_x + 1);
			is_left_0 := CheckPlayerPosition(player_y, player_x + 1);
			# right
			is_right_1 := is_forward_1 & CheckPlayerPosition(player_y + 1, player_x - 1);
			is_right_0 := CheckPlayerPosition(player_y, player_x - 1);	
		}
		else if(Direction->WEST = @player_dir) {
			# forward
			is_forward_2 := CheckPlayerPosition(player_y, player_x - 2) & CheckPlayerPosition(player_y, player_x - 1);
			is_forward_1 := CheckPlayerPosition(player_y, player_x - 1);
			@forward_1_type := GetSpecialPosition(player_y, player_x - 1);
			@is_forward_0 := <>is_forward_2 & <>is_forward_1 & CheckPlayerPosition(player_y, player_x);
			# left
			is_left_1 := is_forward_1 & CheckPlayerPosition(player_y + 1, player_x - 1);
			is_left_0 := CheckPlayerPosition(player_y + 1, player_x);
			# right
			is_right_1 := is_forward_1 & CheckPlayerPosition(player_y - 1, player_x - 1);
			is_right_0 := CheckPlayerPosition(player_y - 1, player_x);	
		};

		# --- common logic ---
		
		# forward 2
		if(is_forward_2 & is_left_1 & is_right_1) {
			@dungeon_image_index := 8;
		}
		else if(is_forward_2 & is_left_1) {
			@dungeon_image_index := 9;
		}
		else if(is_forward_2 & is_right_1) {
			@dungeon_image_index := 10;
		}
		else if(is_forward_2 & is_left_0 & is_right_0) {
			@dungeon_image_index := 12;
		}
		else if(is_forward_2 & is_left_0) {
			@dungeon_image_index := 14;
		}
		else if(is_forward_2 & is_right_0) {
			@dungeon_image_index := 13;
		}
		# forward 1
		else if(is_forward_1 & is_left_1 & is_right_1) {
			@dungeon_image_index := 4;
		}
		else if(is_forward_1 & is_left_1) {
			@dungeon_image_index := 5;
		}
		else if(is_forward_1 & is_right_1) {
			@dungeon_image_index := 6;
		}
		# forward 0
		else if(@is_forward_0 & is_left_0 & is_right_0) {
			@dungeon_image_index := 0;
		}
		else if(@is_forward_0 & is_left_0) {
			@dungeon_image_index := 1;
		}
		else if(@is_forward_0 & is_right_0) {
			@dungeon_image_index := 2;
		}
		# tunnel
		else if(is_forward_2) {
			@dungeon_image_index := 11;	
		}
		else if(is_forward_1) {
			# start
			if(@forward_1_type = MapType->START) {				
				@dungeon_image_index := Game->DUNGEON_IMAGE_MAX - 2;
			}
			# end
			else if(@forward_1_type = MapType->END) {
				@dungeon_image_index := Game->DUNGEON_IMAGE_MAX - 4;
			}
			else {
				@dungeon_image_index := 7;		
			};
		}
		else {
			forward_0_type := GetSpecialPosition(player_y, player_x);
			if(forward_0_type = MapType->START) {
				@dungeon_image_index := Game->DUNGEON_IMAGE_MAX - 1;
			}
			else if(forward_0_type = MapType->END) {
				@dungeon_image_index := Game->DUNGEON_IMAGE_MAX - 3;
			}
			else {
				@dungeon_image_index := 3;
			};
		};
		
#		ShowAsciiMap();
	}

	# map codes
	#	tunnel:		'@' -> '0'
	#	start:		'S' -> '1'
	#	end:		'E' -> '2'
	#	treasure:	'T' -> '3'
	#	potion:		'P' -> '4'
	method : native : UpdateMapPosition(player_y : Int, player_x : Int) ~ Nil {
		map_dimensions := @dungeon_map->Size();

		map_dimension_x := map_dimensions[1];
		map_dimension_y := map_dimensions[0];

		if(player_y < 0 | player_y >= map_dimension_y) {
			return;
		};

		if(player_x < 0 | player_x >= map_dimension_x) {
			return;
		};

		value := @dungeon_map[player_y, player_x];
		select(value) {
			label '@' {
				@dungeon_map[player_y, player_x] := '0';
			}

			label 'S' {
				@dungeon_map[player_y, player_x] := '1';
			}

			label 'E' { 
				@dungeon_map[player_y, player_x] := '2';
			}

			label 'T' {
				@dungeon_map[player_y, player_x] := '3';
			}

			label 'P' {
				@dungeon_map[player_y, player_x] := '4';
			}
		};
	}

	# map codes
	#	tunnel:		'@' -> '0'
	#	start:		'S' -> '1'
	#	end:		'E' -> '2'
	#	treasure:	'T' -> '3'
	#	potion:		'P' -> '4'
	method : native : GetSpecialPosition(player_y : Int, player_x : Int) ~ MapType {
		map_dimensions := @dungeon_map->Size();

		map_dimension_x := map_dimensions[1];
		map_dimension_y := map_dimensions[0];

		if(player_y < 0 | player_y >= map_dimension_y) {
			return MapType->OTHER;
		};

		if(player_x < 0 | player_x >= map_dimension_x) {
			return MapType->OTHER;
		};
	
		if(@dungeon_map[player_y, player_x] = 'S' | @dungeon_map[player_y, player_x] = '1') {
			return MapType->START;
		}
		else if(@dungeon_map[player_y, player_x] = 'E' | @dungeon_map[player_y, player_x] = '2') {
			return MapType->END;
		}
		else if(@dungeon_map[player_y, player_x] = 'T' | @dungeon_map[player_y, player_x] = '3') {
			return MapType->TRESURE;
		}
		else if(@dungeon_map[player_y, player_x] = 'P' | @dungeon_map[player_y, player_x] = '4') {
			return MapType->POTION;
		};

		return MapType->OTHER;
	}
	
	method : native : CheckPlayerPosition(player_y : Int, player_x : Int) ~ Bool {
		map_dimensions := @dungeon_map->Size();

		map_dimension_x := map_dimensions[1];
		map_dimension_y := map_dimensions[0];

		if(player_y < 0 | player_y >= map_dimension_y) {
			return false;
		};

		if(player_x < 0 | player_x >= map_dimension_x) {
			return false;
		};

		value := @dungeon_map[player_y, player_x];
		if((value >= '0' & value <= '4') | value = '@' | value = 'S' | 
				value = 'E' |value = 'T' | value = 'P') {
			return true;
		}
		else {
			return false;
		};
	}

	method : NewLevel() ~ Nil {
		@dungeon_map := @maps->GetNewLevel();
		@dungeon_image_index := 0;
		@player_pos := @dungeon_map_start := @maps->GetStart();
		@player_dir := Direction->NORTH;

		UpdateDungeonView();
	}

	# ------- Fighting Logic -------

	method : StartFight() ~ Nil {
		value := Float->Random();

		@monster := Skeleton->New();
		if(value < 0.4) {
			@monster := Slime->New();
		}
		else if(value > 0.4 & value <= 0.8) {
			@monster := Rat->New();
		}
		else {
			@monster := Skeleton->New();
		};
		
		@monster_image_index := @monster->GetImageIndex();
	}

	method : Fight(type : AttackType) ~ Nil {
		# player attack monster
		
		if(type <> AttackType->POTION) {
			if(@player->Attack(@monster) & @monster->IsAlive()) {
				@player_attack_chunk->PlayChannel(-1, 0);		
			}
			else if(<>@monster->IsAlive()) {
				@monster_die_chunk->PlayChannel(-1, 0);	
			};
		};

		# monster attack player
		if(@monster->IsAlive()) {
			@monster->Attack(@player);

			if(<>@player->IsAlive()) {
				"--- YOU DEAD (like Ned)! ---"->ErrorLine();
				Runtime->Exit(0);
			};
		}
		# monster dead
		else {
			@player->AddExperince(@monster);
			@monster := Nil;
		};
	}
}

# --- Skeleton ---

class Skeleton from Entity {
	New() {
		Parent(EntityType->SKELETON,	# type
			1,							# level
			Int->Random(9, 13),			# max hp
			Int->Random(15, 18),		# strength
			Int->Random(11, 13),		# agility
			Int->Random(7, 10),			# stamina
			6);							# image offset
	}

	method : public : GetName() ~ String {
		return "Slime";
	}

	method : public : GetFightExperince() ~ Int {
		return Int->Random(9, 11);
	}
}

# --- Slime ---

class Slime from Entity {
	New() {
		Parent(EntityType->SLIME,	# type
			1,						# level
			Int->Random(7, 11),		# max hp
			Int->Random(12, 14),	# strength
			Int->Random(10, 11),	# agility
			Int->Random(14, 15),	# stamina
			0);						# image offset
	}

	method : public : GetName() ~ String {
		return "Slime";
	}

	method : public : GetFightExperince() ~ Int {
		return Int->Random(9, 11);
	}
}

# --- Rat ---

class Rat from Entity {
	New() {
		Parent(EntityType->SLIME,	# type
			1,						# level
			Int->Random(5, 10),		# max hp
			Int->Random(14, 16),	# strength
			Int->Random(14, 15),	# agility
			Int->Random(8, 10),		# stamina
			3);						# image offset
	}

	method : public : GetName() ~ String {
		return "Rat";
	}

	method : public : GetFightExperince() ~ Int {
		return Int->Random(12, 15);
	}
}

# --- Player ---

class Player from Entity {
	@experience : Int;
	@gold : Int;
	@potion_count : Int;
	@tent_count : Int;

	New() {
		Parent(EntityType->PERSON,	# type
			1, 						# level
			Int->Random(18, 16),	# max hp
			Int->Random(13, 15),	# strength
			Int->Random(12, 14),	# agility
			Int->Random(13, 15));	# stamina
		@potion_count := 2;
		@tent_count := 2;
	}

	method : public : AddExperince(monster : Entity) ~ Nil {
		@experience += monster->GetFightExperince();
	}

	method : public : GetExperince() ~ Int {
		return @experience;
	}

	method : public : AddGold(value : Int) ~ Nil {
		@gold += value;
	}

	method : public : GetGold() ~ Int {
		return @gold;
	}

	method : public : GetLevel() ~ Int {
		if(@experience > 200) {
			return 4;
		}
		else if(@experience <= 200 & @experience > 130) {
			return 3;
		}
		else if(@experience <= 130 & @experience > 50) {
			return 2;
		};

		return 1;
	}

	method : public : HasTent() ~ Bool {
		return @tent_count > 0;
	}

	method : public : UseTent() ~ Nil {
		if(@tent_count > 0) {
			@tent_count -= 1;
			@hp += Int->Random(0, 1) = 0 ? @max_hp * 0.33 : @max_hp * 0.66;
			if(@hp > @max_hp) {
				SetHp(@max_hp, true);
			};
		};
	}

	method : public : UsePotion() ~ Nil {
			if(@potion_count > 0) {
				@potion_count -= 1;
				SetHp(Int->Random(0, 1) = 0 ? @max_hp * 0.25 : @max_hp * 0.5, true);
				if(@hp > @max_hp) {
					SetHp(@max_hp, true);
				};
			};
	}

	method : public : TakeItem(id : Char, dungeon : Dungeon) ~ Bool {
		if(id = 'T') {
			@gold += Int->Random(10, 35);
			dungeon->PlayTresure();
			return true;
		}
		else if(id = 'P') {
			@potion_count += 1;
			dungeon->PlayPotion();
			return true;
		};

		return false;
	}

	method : public : GetPotionCount() ~ Int {
		return @potion_count;
	}

	method : public : GetTentCount() ~ Int {
		return @tent_count;
	}

	method : public : GetName() ~ String {
		return "Player";
	}

	method : public : GetFightExperince() ~ Int {
		return @experience;
	}
}

class Entity {
	@type : EntityType;
	@level : Int;
	@max_hp : Int;
	@hp : Int;
	@strength : Float;
	@agility : Float;
	@stamina : Float;
	@levels : Float[];
	@image_index : Int;
	@level_mutex : static : ThreadMutex;

	function : Init() ~ Nil {
		@level_mutex := ThreadMutex->New("level_lock");
	}
	
	New(type : EntityType, level : Int, max_hp : Int, strength : Int, agility : Int, stamina : Int, image_index : Int := -1) {
		@type := type;
		@level := level;
		@max_hp := @hp := max_hp;
		@max_hp := max_hp;
		@strength := strength;
		@agility := agility;
		@stamina := stamina;
		@image_index := image_index;

		base := 0.75;
		@levels := Float->New[30];
		each(i : @levels) {
			@levels[i] := base;
			base += 0.15;
		};
	}

	method : virtual : public : GetName() ~ String;

	method : virtual : public : GetFightExperince() ~ Int;

	method : public : GetHpPercentage() ~ Float {
		return @hp->As(Float) / @max_hp->As(Float);
	}

	method : public : IsAlive() ~ Bool {
		return @hp > 0;
	}

	method : public : GetImageIndex() ~ Int {
		return @image_index;
	}

	method : public : GetHp() ~ Int {
		return @hp;
	}

	method : public : GetMaxHp() ~ Int {
		return @max_hp;
	}

	method : public : GetAttack() ~ Int {
		return (@strength * 0.7 + @agility * 0.3) * @levels[Int->Random(@level - 1, @level + 1)];
	}

	method : public : GetDefense() ~ Int {
		return (@stamina * 0.6 + @agility * 0.4) * @levels[Int->Random(@level - 1, @level + 1)];
	}

	method : public : Attack(opponent : Entity) ~ Bool {
		our_name := GetName();
		attack := GetAttack();

		opponent_name := opponent->GetName();
		defense := opponent->GetDefense();

		diff := attack - defense;
		opponent->SetHp(diff);

"{$our_name}: attack={$attack}, defense={$defense} -> {$diff}\n---"->PrintLine();

		return diff > 0;
	}

	method : public : SetHp(adjustment : Int, is_potion : Bool := false) ~ Bool {
		critical(@level_mutex) {
			if(<>is_potion) {
				if(adjustment <= 0) {
					return false;
				};
				@hp -= adjustment;
			}
			else {
				@hp += adjustment;
			};

			if(@hp < 1) {
				@hp := 0;
				return true;
			};

			if(@hp > @max_hp) {
				@hp := @max_hp;
			};
		};

		return false;
	}
}


# --- Mapping ---

class MapHolder {
	@dungeon_map : Char[,];
	@dungeon_map_start : Int[];

	New(dungeon_map : Char[,], dungeon_map_start : Int[]) {
		@dungeon_map := dungeon_map;
		@dungeon_map_start := dungeon_map_start;
	}

	method : public : Get() ~ Char[,] {	
		return @dungeon_map;
	}

	method : public : GetStart() ~ Int[] {
		return @dungeon_map_start;
	}
}

class Maps {
	@dungeon_maps : Vector<MapHolder>;
	@current_map_index : Int;

	New() {
		@dungeon_maps := Vector->New()<MapHolder>;
		LoadMaps("./media/debug.dat");
	}

	method : public : GetNewLevel() ~ Char[,] {
		@current_map_index := Int->Random(0, @dungeon_maps->Size() - 1);
		return @dungeon_maps->Get(@current_map_index)->Get();
	}

	method : GetCurrentMap() ~ Char[,] {
		return @dungeon_maps->Get(@current_map_index)->Get();
	}

	method : public : GetStart() ~ Int[] {
		return @dungeon_maps->Get(@current_map_index)->GetStart();
	}

	method : LoadMaps(map_path : String) ~ Nil {
		map_file := FileReader->New(map_path);
		leaving {
			map_file->Close();
		};
		
		size_line := map_file->ReadString();
		while(<>size_line->StartsWith('-')) {
			rows := cols := size_line->ToInt();

			map := Char->New[rows, cols];
			map_start := Int->New[2];

			for(i := 0; i < rows; i += 1;) {
				line := map_file->ReadString();
				if(line->Size() <> cols) {
					"--- Invalid map cols! ---"->ErrorLine();
					Runtime->Exit(1);
				};

				each(j : line) {
					value := line->Get(j);				
					if(value = 'S') {
						map_start[0] := i;
						map_start[1] := j;
					};
					
					map[i,j] := value;
				};
			};

			@dungeon_maps->AddBack(MapHolder->New(map, map_start));
			size_line := map_file->ReadString();
		};

		map_count := @dungeon_maps->Size();
		"Loaded {$map_count} map(s)"->PrintLine();
	}

	method : ShowAsciiMap(player_pos : Int[], player_dir : Direction) ~ Nil {
		map := GetCurrentMap();
		map_dimensions := map->Size();

		player_x := player_pos[1];
		player_y := player_pos[0];

		for(i := 0; i < map_dimensions[0]; i += 1;) {
			for(j := 0; j < map_dimensions[0]; j += 1;) {
				value := map[i,j];
				if(i = player_y & j = player_x) {
					select(player_dir) {
	        			label Direction->NORTH {
	        				value := '↑';
	        			}

	        			label Direction->SOUTH {
	        				value := '↓';
	        			}

	        			label Direction->EAST {
	        				value := '→';
	        			}

	        			label Direction->WEST {
	        				value := '←';
	        			}
	        		};
				};
				"{$value} "->Print();
			};
			"\n"->Print();
		};
		"--- {$player_x},{$player_y} ---\n"->PrintLine();
	}
}

# --- Constants ---

enum AttackType {
	SWORD,
	SPELL,
	POTION
}

enum MapType {
	OTHER,
	START,
	END,
	TRESURE,
	POTION
}

enum EntityType {
	PERSON,
	SLIME,
	RAT,
	SKELETON
}

enum Direction {
	NORTH,
	SOUTH,
	EAST,
	WEST
}

consts Game {
	SCREEN_WIDTH := 800,
	SCREEN_HEIGHT := 440,
	DUNGEON_IMAGE_MAX := 19,
	MONSTER_IMAGE_MAX := 9,
	MAP_ICON_MAX := 2,
	MAP_SHEET_MAX := 2,
	ACTIONS_ICON_MAX := 10
}
